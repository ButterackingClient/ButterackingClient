/*      */ package net.minecraft.client.renderer;
/*      */ 
/*      */ import client.Client;
/*      */ import com.google.common.collect.Lists;
/*      */ import com.google.common.collect.Maps;
/*      */ import com.google.common.collect.Sets;
/*      */ import com.google.gson.JsonSyntaxException;
/*      */ import java.io.IOException;
/*      */ import java.util.ArrayDeque;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Arrays;
/*      */ import java.util.Collection;
/*      */ import java.util.Collections;
/*      */ import java.util.Deque;
/*      */ import java.util.HashSet;
/*      */ import java.util.Iterator;
/*      */ import java.util.LinkedHashSet;
/*      */ import java.util.List;
/*      */ import java.util.Map;
/*      */ import java.util.Random;
/*      */ import java.util.Set;
/*      */ import java.util.concurrent.Callable;
/*      */ import net.minecraft.block.Block;
/*      */ import net.minecraft.block.material.Material;
/*      */ import net.minecraft.block.state.IBlockState;
/*      */ import net.minecraft.client.Minecraft;
/*      */ import net.minecraft.client.audio.ISound;
/*      */ import net.minecraft.client.audio.PositionedSoundRecord;
/*      */ import net.minecraft.client.gui.GuiScreen;
/*      */ import net.minecraft.client.multiplayer.WorldClient;
/*      */ import net.minecraft.client.particle.EntityFX;
/*      */ import net.minecraft.client.renderer.chunk.ChunkRenderDispatcher;
/*      */ import net.minecraft.client.renderer.chunk.CompiledChunk;
/*      */ import net.minecraft.client.renderer.chunk.IRenderChunkFactory;
/*      */ import net.minecraft.client.renderer.chunk.ListChunkFactory;
/*      */ import net.minecraft.client.renderer.chunk.RenderChunk;
/*      */ import net.minecraft.client.renderer.chunk.VboChunkFactory;
/*      */ import net.minecraft.client.renderer.chunk.VisGraph;
/*      */ import net.minecraft.client.renderer.culling.ClippingHelper;
/*      */ import net.minecraft.client.renderer.culling.ClippingHelperImpl;
/*      */ import net.minecraft.client.renderer.culling.Frustum;
/*      */ import net.minecraft.client.renderer.culling.ICamera;
/*      */ import net.minecraft.client.renderer.entity.RenderManager;
/*      */ import net.minecraft.client.renderer.texture.TextureAtlasSprite;
/*      */ import net.minecraft.client.renderer.texture.TextureManager;
/*      */ import net.minecraft.client.renderer.texture.TextureMap;
/*      */ import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
/*      */ import net.minecraft.client.renderer.vertex.VertexBuffer;
/*      */ import net.minecraft.client.renderer.vertex.VertexFormat;
/*      */ import net.minecraft.client.renderer.vertex.VertexFormatElement;
/*      */ import net.minecraft.client.resources.IResourceManager;
/*      */ import net.minecraft.client.resources.IResourceManagerReloadListener;
/*      */ import net.minecraft.client.shader.Framebuffer;
/*      */ import net.minecraft.client.shader.ShaderGroup;
/*      */ import net.minecraft.client.shader.ShaderLinkHelper;
/*      */ import net.minecraft.crash.CrashReport;
/*      */ import net.minecraft.crash.CrashReportCategory;
/*      */ import net.minecraft.entity.Entity;
/*      */ import net.minecraft.entity.player.EntityPlayer;
/*      */ import net.minecraft.init.Blocks;
/*      */ import net.minecraft.init.Items;
/*      */ import net.minecraft.item.Item;
/*      */ import net.minecraft.item.ItemDye;
/*      */ import net.minecraft.item.ItemRecord;
/*      */ import net.minecraft.src.Config;
/*      */ import net.minecraft.tileentity.TileEntity;
/*      */ import net.minecraft.util.AxisAlignedBB;
/*      */ import net.minecraft.util.BlockPos;
/*      */ import net.minecraft.util.EnumFacing;
/*      */ import net.minecraft.util.EnumParticleTypes;
/*      */ import net.minecraft.util.EnumWorldBlockLayer;
/*      */ import net.minecraft.util.LongHashMap;
/*      */ import net.minecraft.util.MathHelper;
/*      */ import net.minecraft.util.Matrix4f;
/*      */ import net.minecraft.util.MovingObjectPosition;
/*      */ import net.minecraft.util.ReportedException;
/*      */ import net.minecraft.util.ResourceLocation;
/*      */ import net.minecraft.util.Vec3;
/*      */ import net.minecraft.util.Vector3d;
/*      */ import net.minecraft.world.IBlockAccess;
/*      */ import net.minecraft.world.IWorldAccess;
/*      */ import net.minecraft.world.World;
/*      */ import net.minecraft.world.WorldProvider;
/*      */ import net.minecraft.world.border.WorldBorder;
/*      */ import net.minecraft.world.chunk.Chunk;
/*      */ import net.minecraft.world.chunk.IChunkProvider;
/*      */ import net.optifine.CustomColors;
/*      */ import net.optifine.CustomSky;
/*      */ import net.optifine.DynamicLights;
/*      */ import net.optifine.Lagometer;
/*      */ import net.optifine.RandomEntities;
/*      */ import net.optifine.SmartAnimations;
/*      */ import net.optifine.model.BlockModelUtils;
/*      */ import net.optifine.reflect.Reflector;
/*      */ import net.optifine.render.ChunkVisibility;
/*      */ import net.optifine.render.CloudRenderer;
/*      */ import net.optifine.render.RenderEnv;
/*      */ import net.optifine.shaders.Shaders;
/*      */ import net.optifine.shaders.ShadersRender;
/*      */ import net.optifine.shaders.ShadowUtils;
/*      */ import net.optifine.shaders.gui.GuiShaderOptions;
/*      */ import net.optifine.util.ChunkUtils;
/*      */ import net.optifine.util.RenderChunkUtils;
/*      */ import org.apache.logging.log4j.LogManager;
/*      */ import org.apache.logging.log4j.Logger;
/*      */ import org.lwjgl.input.Keyboard;
/*      */ import org.lwjgl.opengl.GL11;
/*      */ import org.lwjgl.util.vector.Matrix4f;
/*      */ import org.lwjgl.util.vector.Vector3f;
/*      */ import org.lwjgl.util.vector.Vector4f;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class RenderGlobal
/*      */   implements IWorldAccess, IResourceManagerReloadListener
/*      */ {
/* 3551 */   private static final Logger logger = LogManager.getLogger();
/* 3552 */   private static final ResourceLocation locationMoonPhasesPng = new ResourceLocation("textures/environment/moon_phases.png");
/* 3553 */   private static final ResourceLocation locationSunPng = new ResourceLocation("textures/environment/sun.png");
/* 3554 */   private static final ResourceLocation locationCloudsPng = new ResourceLocation("textures/environment/clouds.png");
/* 3555 */   private static final ResourceLocation locationEndSkyPng = new ResourceLocation("textures/environment/end_sky.png");
/* 3556 */   private static final ResourceLocation locationForcefieldPng = new ResourceLocation("textures/misc/forcefield.png");
/*      */ 
/*      */   
/*      */   public final Minecraft mc;
/*      */ 
/*      */   
/*      */   private final TextureManager renderEngine;
/*      */ 
/*      */   
/*      */   private final RenderManager renderManager;
/*      */   
/*      */   private WorldClient theWorld;
/*      */   
/* 3569 */   private Set<RenderChunk> chunksToUpdate = Sets.newLinkedHashSet();
/* 3570 */   private List<ContainerLocalRenderInformation> renderInfos = Lists.newArrayListWithCapacity(69696);
/* 3571 */   private final Set<TileEntity> setTileEntities = Sets.newHashSet();
/*      */ 
/*      */   
/*      */   private ViewFrustum viewFrustum;
/*      */ 
/*      */   
/* 3577 */   private int starGLCallList = -1;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 3582 */   private int glSkyList = -1;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 3587 */   private int glSkyList2 = -1;
/*      */   
/*      */   private VertexFormat vertexBufferFormat;
/*      */   
/*      */   private VertexBuffer starVBO;
/*      */   
/*      */   private VertexBuffer skyVBO;
/*      */   
/*      */   private VertexBuffer sky2VBO;
/*      */   private int cloudTickCounter;
/* 3597 */   public final Map<Integer, DestroyBlockProgress> damagedBlocks = Maps.newHashMap();
/* 3598 */   private final Map<BlockPos, ISound> mapSoundPositions = Maps.newHashMap();
/* 3599 */   private final TextureAtlasSprite[] destroyBlockIcons = new TextureAtlasSprite[10];
/*      */ 
/*      */   
/*      */   private Framebuffer entityOutlineFramebuffer;
/*      */   
/*      */   private ShaderGroup entityOutlineShader;
/*      */   
/* 3606 */   private double frustumUpdatePosX = Double.MIN_VALUE;
/* 3607 */   private double frustumUpdatePosY = Double.MIN_VALUE;
/* 3608 */   private double frustumUpdatePosZ = Double.MIN_VALUE;
/* 3609 */   private int frustumUpdatePosChunkX = Integer.MIN_VALUE;
/* 3610 */   private int frustumUpdatePosChunkY = Integer.MIN_VALUE;
/* 3611 */   private int frustumUpdatePosChunkZ = Integer.MIN_VALUE;
/* 3612 */   private double lastViewEntityX = Double.MIN_VALUE;
/* 3613 */   private double lastViewEntityY = Double.MIN_VALUE;
/* 3614 */   private double lastViewEntityZ = Double.MIN_VALUE;
/* 3615 */   private double lastViewEntityPitch = Double.MIN_VALUE;
/* 3616 */   private double lastViewEntityYaw = Double.MIN_VALUE;
/* 3617 */   private final ChunkRenderDispatcher renderDispatcher = new ChunkRenderDispatcher();
/*      */   private ChunkRenderContainer renderContainer;
/* 3619 */   private int renderDistanceChunks = -1;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 3624 */   private int renderEntitiesStartupCounter = 2;
/*      */ 
/*      */   
/*      */   private int countEntitiesTotal;
/*      */ 
/*      */   
/*      */   private int countEntitiesRendered;
/*      */ 
/*      */   
/*      */   private int countEntitiesHidden;
/*      */ 
/*      */   
/*      */   private boolean debugFixTerrainFrustum = false;
/*      */ 
/*      */   
/*      */   private ClippingHelper debugFixedClippingHelper;
/*      */ 
/*      */   
/* 3642 */   private final Vector4f[] debugTerrainMatrix = new Vector4f[8];
/* 3643 */   private final Vector3d debugTerrainFrustumPosition = new Vector3d();
/*      */   private boolean vboEnabled = false;
/*      */   IRenderChunkFactory renderChunkFactory;
/*      */   private double prevRenderSortX;
/*      */   private double prevRenderSortY;
/*      */   private double prevRenderSortZ;
/*      */   public boolean displayListEntitiesDirty = true;
/*      */   private CloudRenderer cloudRenderer;
/*      */   public Entity renderedEntity;
/* 3652 */   public Set chunksToResortTransparency = new LinkedHashSet();
/* 3653 */   public Set chunksToUpdateForced = new LinkedHashSet();
/* 3654 */   private Deque visibilityDeque = new ArrayDeque();
/* 3655 */   private List renderInfosEntities = new ArrayList(1024);
/* 3656 */   private List renderInfosTileEntities = new ArrayList(1024);
/* 3657 */   private List renderInfosNormal = new ArrayList(1024);
/* 3658 */   private List renderInfosEntitiesNormal = new ArrayList(1024);
/* 3659 */   private List renderInfosTileEntitiesNormal = new ArrayList(1024);
/* 3660 */   private List renderInfosShadow = new ArrayList(1024);
/* 3661 */   private List renderInfosEntitiesShadow = new ArrayList(1024);
/* 3662 */   private List renderInfosTileEntitiesShadow = new ArrayList(1024);
/* 3663 */   private int renderDistance = 0;
/* 3664 */   private int renderDistanceSq = 0;
/* 3665 */   private static final Set SET_ALL_FACINGS = Collections.unmodifiableSet(new HashSet(Arrays.asList((Object[])EnumFacing.VALUES)));
/*      */   private int countTileEntitiesRendered;
/* 3667 */   private IChunkProvider worldChunkProvider = null;
/* 3668 */   private LongHashMap worldChunkProviderMap = null;
/* 3669 */   private int countLoadedChunksPrev = 0;
/* 3670 */   private RenderEnv renderEnv = new RenderEnv(Blocks.air.getDefaultState(), new BlockPos(0, 0, 0));
/*      */   public boolean renderOverlayDamaged = false;
/*      */   public boolean renderOverlayEyes = false;
/*      */   private boolean firstWorldLoad = false;
/* 3674 */   private static int renderEntitiesCounter = 0;
/*      */   
/*      */   public RenderGlobal(Minecraft mcIn) {
/* 3677 */     this.cloudRenderer = new CloudRenderer(mcIn);
/* 3678 */     this.mc = mcIn;
/* 3679 */     this.renderManager = mcIn.getRenderManager();
/* 3680 */     this.renderEngine = mcIn.getTextureManager();
/* 3681 */     this.renderEngine.bindTexture(locationForcefieldPng);
/* 3682 */     GL11.glTexParameteri(3553, 10242, 10497);
/* 3683 */     GL11.glTexParameteri(3553, 10243, 10497);
/* 3684 */     GlStateManager.bindTexture(0);
/* 3685 */     updateDestroyBlockIcons();
/* 3686 */     this.vboEnabled = OpenGlHelper.useVbo();
/*      */     
/* 3688 */     if (this.vboEnabled) {
/* 3689 */       this.renderContainer = new VboRenderList();
/* 3690 */       this.renderChunkFactory = (IRenderChunkFactory)new VboChunkFactory();
/*      */     } else {
/* 3692 */       this.renderContainer = new RenderList();
/* 3693 */       this.renderChunkFactory = (IRenderChunkFactory)new ListChunkFactory();
/*      */     } 
/*      */     
/* 3696 */     this.vertexBufferFormat = new VertexFormat();
/* 3697 */     this.vertexBufferFormat.addElement(new VertexFormatElement(0, VertexFormatElement.EnumType.FLOAT, VertexFormatElement.EnumUsage.POSITION, 3));
/* 3698 */     generateStars();
/* 3699 */     generateSky();
/* 3700 */     generateSky2();
/*      */   }
/*      */   
/*      */   public void onResourceManagerReload(IResourceManager resourceManager) {
/* 3704 */     updateDestroyBlockIcons();
/*      */   }
/*      */   
/*      */   private void updateDestroyBlockIcons() {
/* 3708 */     TextureMap texturemap = this.mc.getTextureMapBlocks();
/*      */     
/* 3710 */     for (int i = 0; i < this.destroyBlockIcons.length; i++) {
/* 3711 */       this.destroyBlockIcons[i] = texturemap.getAtlasSprite("minecraft:blocks/destroy_stage_" + i);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void makeEntityOutlineShader() {
/* 3719 */     if (OpenGlHelper.shadersSupported) {
/* 3720 */       if (ShaderLinkHelper.getStaticShaderLinkHelper() == null) {
/* 3721 */         ShaderLinkHelper.setNewStaticShaderLinkHelper();
/*      */       }
/*      */       
/* 3724 */       ResourceLocation resourcelocation = new ResourceLocation("shaders/post/entity_outline.json");
/*      */       
/*      */       try {
/* 3727 */         this.entityOutlineShader = new ShaderGroup(this.mc.getTextureManager(), this.mc.getResourceManager(), this.mc.getFramebuffer(), resourcelocation);
/* 3728 */         this.entityOutlineShader.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
/* 3729 */         this.entityOutlineFramebuffer = this.entityOutlineShader.getFramebufferRaw("final");
/* 3730 */       } catch (IOException ioexception) {
/* 3731 */         logger.warn("Failed to load shader: " + resourcelocation, ioexception);
/* 3732 */         this.entityOutlineShader = null;
/* 3733 */         this.entityOutlineFramebuffer = null;
/* 3734 */       } catch (JsonSyntaxException jsonsyntaxexception) {
/* 3735 */         logger.warn("Failed to load shader: " + resourcelocation, (Throwable)jsonsyntaxexception);
/* 3736 */         this.entityOutlineShader = null;
/* 3737 */         this.entityOutlineFramebuffer = null;
/*      */       } 
/*      */     } else {
/* 3740 */       this.entityOutlineShader = null;
/* 3741 */       this.entityOutlineFramebuffer = null;
/*      */     } 
/*      */   }
/*      */   
/*      */   public void renderEntityOutlineFramebuffer() {
/* 3746 */     if (isRenderEntityOutlines()) {
/* 3747 */       GlStateManager.enableBlend();
/* 3748 */       GlStateManager.tryBlendFuncSeparate(770, 771, 0, 1);
/* 3749 */       this.entityOutlineFramebuffer.framebufferRenderExt(this.mc.displayWidth, this.mc.displayHeight, false);
/* 3750 */       GlStateManager.disableBlend();
/*      */     } 
/*      */   }
/*      */   
/*      */   protected boolean isRenderEntityOutlines() {
/* 3755 */     return (!Config.isFastRender() && !Config.isShaders() && !Config.isAntialiasing()) ? ((this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.thePlayer != null && this.mc.thePlayer.isSpectator() && this.mc.gameSettings.keyBindStreamStartStop.isKeyDown())) : false;
/*      */   }
/*      */   
/*      */   private void generateSky2() {
/* 3759 */     Tessellator tessellator = Tessellator.getInstance();
/* 3760 */     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/*      */     
/* 3762 */     if (this.sky2VBO != null) {
/* 3763 */       this.sky2VBO.deleteGlBuffers();
/*      */     }
/*      */     
/* 3766 */     if (this.glSkyList2 >= 0) {
/* 3767 */       GLAllocation.deleteDisplayLists(this.glSkyList2);
/* 3768 */       this.glSkyList2 = -1;
/*      */     } 
/*      */     
/* 3771 */     if (this.vboEnabled) {
/* 3772 */       this.sky2VBO = new VertexBuffer(this.vertexBufferFormat);
/* 3773 */       renderSky(worldrenderer, -16.0F, true);
/* 3774 */       worldrenderer.finishDrawing();
/* 3775 */       worldrenderer.reset();
/* 3776 */       this.sky2VBO.bufferData(worldrenderer.getByteBuffer());
/*      */     } else {
/* 3778 */       this.glSkyList2 = GLAllocation.generateDisplayLists(1);
/* 3779 */       GL11.glNewList(this.glSkyList2, 4864);
/* 3780 */       renderSky(worldrenderer, -16.0F, true);
/* 3781 */       tessellator.draw();
/* 3782 */       GL11.glEndList();
/*      */     } 
/*      */   }
/*      */   
/*      */   private void generateSky() {
/* 3787 */     Tessellator tessellator = Tessellator.getInstance();
/* 3788 */     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/*      */     
/* 3790 */     if (this.skyVBO != null) {
/* 3791 */       this.skyVBO.deleteGlBuffers();
/*      */     }
/*      */     
/* 3794 */     if (this.glSkyList >= 0) {
/* 3795 */       GLAllocation.deleteDisplayLists(this.glSkyList);
/* 3796 */       this.glSkyList = -1;
/*      */     } 
/*      */     
/* 3799 */     if (this.vboEnabled) {
/* 3800 */       this.skyVBO = new VertexBuffer(this.vertexBufferFormat);
/* 3801 */       renderSky(worldrenderer, 16.0F, false);
/* 3802 */       worldrenderer.finishDrawing();
/* 3803 */       worldrenderer.reset();
/* 3804 */       this.skyVBO.bufferData(worldrenderer.getByteBuffer());
/*      */     } else {
/* 3806 */       this.glSkyList = GLAllocation.generateDisplayLists(1);
/* 3807 */       GL11.glNewList(this.glSkyList, 4864);
/* 3808 */       renderSky(worldrenderer, 16.0F, false);
/* 3809 */       tessellator.draw();
/* 3810 */       GL11.glEndList();
/*      */     } 
/*      */   }
/*      */   
/*      */   private void renderSky(WorldRenderer worldRendererIn, float posY, boolean reverseX) {
/* 3815 */     int i = 64;
/* 3816 */     int j = 6;
/* 3817 */     worldRendererIn.begin(7, DefaultVertexFormats.POSITION);
/* 3818 */     int k = (this.renderDistance / 64 + 1) * 64 + 64;
/*      */     
/* 3820 */     for (int l = -k; l <= k; l += 64) {
/* 3821 */       for (int i1 = -k; i1 <= k; i1 += 64) {
/* 3822 */         float f = l;
/* 3823 */         float f1 = (l + 64);
/*      */         
/* 3825 */         if (reverseX) {
/* 3826 */           f1 = l;
/* 3827 */           f = (l + 64);
/*      */         } 
/*      */         
/* 3830 */         worldRendererIn.pos(f, posY, i1).endVertex();
/* 3831 */         worldRendererIn.pos(f1, posY, i1).endVertex();
/* 3832 */         worldRendererIn.pos(f1, posY, (i1 + 64)).endVertex();
/* 3833 */         worldRendererIn.pos(f, posY, (i1 + 64)).endVertex();
/*      */       } 
/*      */     } 
/*      */   }
/*      */   
/*      */   private void generateStars() {
/* 3839 */     Tessellator tessellator = Tessellator.getInstance();
/* 3840 */     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/*      */     
/* 3842 */     if (this.starVBO != null) {
/* 3843 */       this.starVBO.deleteGlBuffers();
/*      */     }
/*      */     
/* 3846 */     if (this.starGLCallList >= 0) {
/* 3847 */       GLAllocation.deleteDisplayLists(this.starGLCallList);
/* 3848 */       this.starGLCallList = -1;
/*      */     } 
/*      */     
/* 3851 */     if (this.vboEnabled) {
/* 3852 */       this.starVBO = new VertexBuffer(this.vertexBufferFormat);
/* 3853 */       renderStars(worldrenderer);
/* 3854 */       worldrenderer.finishDrawing();
/* 3855 */       worldrenderer.reset();
/* 3856 */       this.starVBO.bufferData(worldrenderer.getByteBuffer());
/*      */     } else {
/* 3858 */       this.starGLCallList = GLAllocation.generateDisplayLists(1);
/* 3859 */       GlStateManager.pushMatrix();
/* 3860 */       GL11.glNewList(this.starGLCallList, 4864);
/* 3861 */       renderStars(worldrenderer);
/* 3862 */       tessellator.draw();
/* 3863 */       GL11.glEndList();
/* 3864 */       GlStateManager.popMatrix();
/*      */     } 
/*      */   }
/*      */   
/*      */   private void renderStars(WorldRenderer worldRendererIn) {
/* 3869 */     Random random = new Random(10842L);
/* 3870 */     worldRendererIn.begin(7, DefaultVertexFormats.POSITION);
/*      */     
/* 3872 */     for (int i = 0; i < 1500; i++) {
/* 3873 */       double d0 = (random.nextFloat() * 2.0F - 1.0F);
/* 3874 */       double d1 = (random.nextFloat() * 2.0F - 1.0F);
/* 3875 */       double d2 = (random.nextFloat() * 2.0F - 1.0F);
/* 3876 */       double d3 = (0.15F + random.nextFloat() * 0.1F);
/* 3877 */       double d4 = d0 * d0 + d1 * d1 + d2 * d2;
/*      */       
/* 3879 */       if (d4 < 1.0D && d4 > 0.01D) {
/* 3880 */         d4 = 1.0D / Math.sqrt(d4);
/* 3881 */         d0 *= d4;
/* 3882 */         d1 *= d4;
/* 3883 */         d2 *= d4;
/* 3884 */         double d5 = d0 * 100.0D;
/* 3885 */         double d6 = d1 * 100.0D;
/* 3886 */         double d7 = d2 * 100.0D;
/* 3887 */         double d8 = Math.atan2(d0, d2);
/* 3888 */         double d9 = Math.sin(d8);
/* 3889 */         double d10 = Math.cos(d8);
/* 3890 */         double d11 = Math.atan2(Math.sqrt(d0 * d0 + d2 * d2), d1);
/* 3891 */         double d12 = Math.sin(d11);
/* 3892 */         double d13 = Math.cos(d11);
/* 3893 */         double d14 = random.nextDouble() * Math.PI * 2.0D;
/* 3894 */         double d15 = Math.sin(d14);
/* 3895 */         double d16 = Math.cos(d14);
/*      */         
/* 3897 */         for (int j = 0; j < 4; j++) {
/* 3898 */           double d17 = 0.0D;
/* 3899 */           double d18 = ((j & 0x2) - 1) * d3;
/* 3900 */           double d19 = ((j + 1 & 0x2) - 1) * d3;
/* 3901 */           double d20 = 0.0D;
/* 3902 */           double d21 = d18 * d16 - d19 * d15;
/* 3903 */           double d22 = d19 * d16 + d18 * d15;
/* 3904 */           double d23 = d21 * d12 + 0.0D * d13;
/* 3905 */           double d24 = 0.0D * d12 - d21 * d13;
/* 3906 */           double d25 = d24 * d9 - d22 * d10;
/* 3907 */           double d26 = d22 * d9 + d24 * d10;
/* 3908 */           worldRendererIn.pos(d5 + d25, d6 + d23, d7 + d26).endVertex();
/*      */         } 
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setWorldAndLoadRenderers(WorldClient worldClientIn) {
/* 3918 */     if (this.theWorld != null) {
/* 3919 */       this.theWorld.removeWorldAccess(this);
/*      */     }
/*      */     
/* 3922 */     this.frustumUpdatePosX = Double.MIN_VALUE;
/* 3923 */     this.frustumUpdatePosY = Double.MIN_VALUE;
/* 3924 */     this.frustumUpdatePosZ = Double.MIN_VALUE;
/* 3925 */     this.frustumUpdatePosChunkX = Integer.MIN_VALUE;
/* 3926 */     this.frustumUpdatePosChunkY = Integer.MIN_VALUE;
/* 3927 */     this.frustumUpdatePosChunkZ = Integer.MIN_VALUE;
/* 3928 */     this.renderManager.set((World)worldClientIn);
/* 3929 */     this.theWorld = worldClientIn;
/*      */     
/* 3931 */     if (Config.isDynamicLights()) {
/* 3932 */       DynamicLights.clear();
/*      */     }
/*      */     
/* 3935 */     ChunkVisibility.reset();
/* 3936 */     this.worldChunkProvider = null;
/* 3937 */     this.worldChunkProviderMap = null;
/* 3938 */     this.renderEnv.reset(null, null);
/* 3939 */     Shaders.checkWorldChanged((World)this.theWorld);
/*      */     
/* 3941 */     if (worldClientIn != null) {
/* 3942 */       worldClientIn.addWorldAccess(this);
/* 3943 */       loadRenderers();
/*      */     } else {
/* 3945 */       this.chunksToUpdate.clear();
/* 3946 */       clearRenderInfos();
/*      */       
/* 3948 */       if (this.viewFrustum != null) {
/* 3949 */         this.viewFrustum.deleteGlResources();
/*      */       }
/*      */       
/* 3952 */       this.viewFrustum = null;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void loadRenderers() {
/* 3961 */     if (this.theWorld != null) {
/* 3962 */       this.displayListEntitiesDirty = true;
/* 3963 */       Blocks.leaves.setGraphicsLevel(Config.isTreesFancy());
/* 3964 */       Blocks.leaves2.setGraphicsLevel(Config.isTreesFancy());
/* 3965 */       BlockModelRenderer.updateAoLightValue();
/*      */       
/* 3967 */       if (Config.isDynamicLights()) {
/* 3968 */         DynamicLights.clear();
/*      */       }
/*      */       
/* 3971 */       SmartAnimations.update();
/* 3972 */       this.renderDistanceChunks = this.mc.gameSettings.renderDistanceChunks;
/* 3973 */       this.renderDistance = this.renderDistanceChunks * 16;
/* 3974 */       this.renderDistanceSq = this.renderDistance * this.renderDistance;
/* 3975 */       boolean flag = this.vboEnabled;
/* 3976 */       this.vboEnabled = OpenGlHelper.useVbo();
/*      */       
/* 3978 */       if (flag && !this.vboEnabled) {
/* 3979 */         this.renderContainer = new RenderList();
/* 3980 */         this.renderChunkFactory = (IRenderChunkFactory)new ListChunkFactory();
/* 3981 */       } else if (!flag && this.vboEnabled) {
/* 3982 */         this.renderContainer = new VboRenderList();
/* 3983 */         this.renderChunkFactory = (IRenderChunkFactory)new VboChunkFactory();
/*      */       } 
/*      */       
/* 3986 */       generateStars();
/* 3987 */       generateSky();
/* 3988 */       generateSky2();
/*      */       
/* 3990 */       if (this.viewFrustum != null) {
/* 3991 */         this.viewFrustum.deleteGlResources();
/*      */       }
/*      */       
/* 3994 */       stopChunkUpdates();
/*      */       
/* 3996 */       synchronized (this.setTileEntities) {
/* 3997 */         this.setTileEntities.clear();
/*      */       } 
/*      */       
/* 4000 */       this.viewFrustum = new ViewFrustum((World)this.theWorld, this.mc.gameSettings.renderDistanceChunks, this, this.renderChunkFactory);
/*      */       
/* 4002 */       if (this.theWorld != null) {
/* 4003 */         Entity entity = this.mc.getRenderViewEntity();
/*      */         
/* 4005 */         if (entity != null) {
/* 4006 */           this.viewFrustum.updateChunkPositions(entity.posX, entity.posZ);
/*      */         }
/*      */       } 
/*      */       
/* 4010 */       this.renderEntitiesStartupCounter = 2;
/*      */     } 
/*      */     
/* 4013 */     if (this.mc.thePlayer == null) {
/* 4014 */       this.firstWorldLoad = true;
/*      */     }
/*      */   }
/*      */   
/*      */   public void stopChunkUpdates() {
/* 4019 */     this.chunksToUpdate.clear();
/* 4020 */     this.renderDispatcher.stopChunkUpdates();
/*      */   }
/*      */   
/*      */   public void createBindEntityOutlineFbs(int width, int height) {
/* 4024 */     if (OpenGlHelper.shadersSupported && this.entityOutlineShader != null) {
/* 4025 */       this.entityOutlineShader.createBindFramebuffers(width, height);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void renderEntities(Entity renderViewEntity, ICamera camera, float partialTicks) {
/*      */     // Byte code:
/*      */     //   0: iconst_0
/*      */     //   1: istore #4
/*      */     //   3: getstatic net/optifine/reflect/Reflector.MinecraftForgeClient_getRenderPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   6: invokevirtual exists : ()Z
/*      */     //   9: ifeq -> 24
/*      */     //   12: getstatic net/optifine/reflect/Reflector.MinecraftForgeClient_getRenderPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   15: iconst_0
/*      */     //   16: anewarray java/lang/Object
/*      */     //   19: invokestatic callInt : (Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)I
/*      */     //   22: istore #4
/*      */     //   24: aload_0
/*      */     //   25: getfield renderEntitiesStartupCounter : I
/*      */     //   28: ifle -> 50
/*      */     //   31: iload #4
/*      */     //   33: ifle -> 37
/*      */     //   36: return
/*      */     //   37: aload_0
/*      */     //   38: dup
/*      */     //   39: getfield renderEntitiesStartupCounter : I
/*      */     //   42: iconst_1
/*      */     //   43: isub
/*      */     //   44: putfield renderEntitiesStartupCounter : I
/*      */     //   47: goto -> 2053
/*      */     //   50: aload_1
/*      */     //   51: getfield prevPosX : D
/*      */     //   54: aload_1
/*      */     //   55: getfield posX : D
/*      */     //   58: aload_1
/*      */     //   59: getfield prevPosX : D
/*      */     //   62: dsub
/*      */     //   63: fload_3
/*      */     //   64: f2d
/*      */     //   65: dmul
/*      */     //   66: dadd
/*      */     //   67: dstore #5
/*      */     //   69: aload_1
/*      */     //   70: getfield prevPosY : D
/*      */     //   73: aload_1
/*      */     //   74: getfield posY : D
/*      */     //   77: aload_1
/*      */     //   78: getfield prevPosY : D
/*      */     //   81: dsub
/*      */     //   82: fload_3
/*      */     //   83: f2d
/*      */     //   84: dmul
/*      */     //   85: dadd
/*      */     //   86: dstore #7
/*      */     //   88: aload_1
/*      */     //   89: getfield prevPosZ : D
/*      */     //   92: aload_1
/*      */     //   93: getfield posZ : D
/*      */     //   96: aload_1
/*      */     //   97: getfield prevPosZ : D
/*      */     //   100: dsub
/*      */     //   101: fload_3
/*      */     //   102: f2d
/*      */     //   103: dmul
/*      */     //   104: dadd
/*      */     //   105: dstore #9
/*      */     //   107: aload_0
/*      */     //   108: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   111: getfield theProfiler : Lnet/minecraft/profiler/Profiler;
/*      */     //   114: ldc_w 'prepare'
/*      */     //   117: invokevirtual startSection : (Ljava/lang/String;)V
/*      */     //   120: getstatic net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.instance : Lnet/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher;
/*      */     //   123: aload_0
/*      */     //   124: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   127: aload_0
/*      */     //   128: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   131: invokevirtual getTextureManager : ()Lnet/minecraft/client/renderer/texture/TextureManager;
/*      */     //   134: aload_0
/*      */     //   135: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   138: getfield fontRendererObj : Lnet/minecraft/client/gui/FontRenderer;
/*      */     //   141: aload_0
/*      */     //   142: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   145: invokevirtual getRenderViewEntity : ()Lnet/minecraft/entity/Entity;
/*      */     //   148: fload_3
/*      */     //   149: invokevirtual cacheActiveRenderInfo : (Lnet/minecraft/world/World;Lnet/minecraft/client/renderer/texture/TextureManager;Lnet/minecraft/client/gui/FontRenderer;Lnet/minecraft/entity/Entity;F)V
/*      */     //   152: aload_0
/*      */     //   153: getfield renderManager : Lnet/minecraft/client/renderer/entity/RenderManager;
/*      */     //   156: aload_0
/*      */     //   157: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   160: aload_0
/*      */     //   161: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   164: getfield fontRendererObj : Lnet/minecraft/client/gui/FontRenderer;
/*      */     //   167: aload_0
/*      */     //   168: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   171: invokevirtual getRenderViewEntity : ()Lnet/minecraft/entity/Entity;
/*      */     //   174: aload_0
/*      */     //   175: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   178: getfield pointedEntity : Lnet/minecraft/entity/Entity;
/*      */     //   181: aload_0
/*      */     //   182: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   185: getfield gameSettings : Lnet/minecraft/client/settings/GameSettings;
/*      */     //   188: fload_3
/*      */     //   189: invokevirtual cacheActiveRenderInfo : (Lnet/minecraft/world/World;Lnet/minecraft/client/gui/FontRenderer;Lnet/minecraft/entity/Entity;Lnet/minecraft/entity/Entity;Lnet/minecraft/client/settings/GameSettings;F)V
/*      */     //   192: getstatic net/minecraft/client/renderer/RenderGlobal.renderEntitiesCounter : I
/*      */     //   195: iconst_1
/*      */     //   196: iadd
/*      */     //   197: putstatic net/minecraft/client/renderer/RenderGlobal.renderEntitiesCounter : I
/*      */     //   200: iload #4
/*      */     //   202: ifne -> 225
/*      */     //   205: aload_0
/*      */     //   206: iconst_0
/*      */     //   207: putfield countEntitiesTotal : I
/*      */     //   210: aload_0
/*      */     //   211: iconst_0
/*      */     //   212: putfield countEntitiesRendered : I
/*      */     //   215: aload_0
/*      */     //   216: iconst_0
/*      */     //   217: putfield countEntitiesHidden : I
/*      */     //   220: aload_0
/*      */     //   221: iconst_0
/*      */     //   222: putfield countTileEntitiesRendered : I
/*      */     //   225: aload_0
/*      */     //   226: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   229: invokevirtual getRenderViewEntity : ()Lnet/minecraft/entity/Entity;
/*      */     //   232: astore #11
/*      */     //   234: aload #11
/*      */     //   236: getfield lastTickPosX : D
/*      */     //   239: aload #11
/*      */     //   241: getfield posX : D
/*      */     //   244: aload #11
/*      */     //   246: getfield lastTickPosX : D
/*      */     //   249: dsub
/*      */     //   250: fload_3
/*      */     //   251: f2d
/*      */     //   252: dmul
/*      */     //   253: dadd
/*      */     //   254: dstore #12
/*      */     //   256: aload #11
/*      */     //   258: getfield lastTickPosY : D
/*      */     //   261: aload #11
/*      */     //   263: getfield posY : D
/*      */     //   266: aload #11
/*      */     //   268: getfield lastTickPosY : D
/*      */     //   271: dsub
/*      */     //   272: fload_3
/*      */     //   273: f2d
/*      */     //   274: dmul
/*      */     //   275: dadd
/*      */     //   276: dstore #14
/*      */     //   278: aload #11
/*      */     //   280: getfield lastTickPosZ : D
/*      */     //   283: aload #11
/*      */     //   285: getfield posZ : D
/*      */     //   288: aload #11
/*      */     //   290: getfield lastTickPosZ : D
/*      */     //   293: dsub
/*      */     //   294: fload_3
/*      */     //   295: f2d
/*      */     //   296: dmul
/*      */     //   297: dadd
/*      */     //   298: dstore #16
/*      */     //   300: dload #12
/*      */     //   302: putstatic net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.staticPlayerX : D
/*      */     //   305: dload #14
/*      */     //   307: putstatic net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.staticPlayerY : D
/*      */     //   310: dload #16
/*      */     //   312: putstatic net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.staticPlayerZ : D
/*      */     //   315: aload_0
/*      */     //   316: getfield renderManager : Lnet/minecraft/client/renderer/entity/RenderManager;
/*      */     //   319: dload #12
/*      */     //   321: dload #14
/*      */     //   323: dload #16
/*      */     //   325: invokevirtual setRenderPosition : (DDD)V
/*      */     //   328: aload_0
/*      */     //   329: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   332: getfield entityRenderer : Lnet/minecraft/client/renderer/EntityRenderer;
/*      */     //   335: invokevirtual enableLightmap : ()V
/*      */     //   338: aload_0
/*      */     //   339: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   342: getfield theProfiler : Lnet/minecraft/profiler/Profiler;
/*      */     //   345: ldc_w 'global'
/*      */     //   348: invokevirtual endStartSection : (Ljava/lang/String;)V
/*      */     //   351: aload_0
/*      */     //   352: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   355: invokevirtual getLoadedEntityList : ()Ljava/util/List;
/*      */     //   358: astore #18
/*      */     //   360: iload #4
/*      */     //   362: ifne -> 376
/*      */     //   365: aload_0
/*      */     //   366: aload #18
/*      */     //   368: invokeinterface size : ()I
/*      */     //   373: putfield countEntitiesTotal : I
/*      */     //   376: invokestatic isFogOff : ()Z
/*      */     //   379: ifeq -> 398
/*      */     //   382: aload_0
/*      */     //   383: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   386: getfield entityRenderer : Lnet/minecraft/client/renderer/EntityRenderer;
/*      */     //   389: getfield fogStandard : Z
/*      */     //   392: ifeq -> 398
/*      */     //   395: invokestatic disableFog : ()V
/*      */     //   398: getstatic net/optifine/reflect/Reflector.ForgeEntity_shouldRenderInPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   401: invokevirtual exists : ()Z
/*      */     //   404: istore #19
/*      */     //   406: getstatic net/optifine/reflect/Reflector.ForgeTileEntity_shouldRenderInPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   409: invokevirtual exists : ()Z
/*      */     //   412: istore #20
/*      */     //   414: iconst_0
/*      */     //   415: istore #21
/*      */     //   417: goto -> 505
/*      */     //   420: aload_0
/*      */     //   421: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   424: getfield weatherEffects : Ljava/util/List;
/*      */     //   427: iload #21
/*      */     //   429: invokeinterface get : (I)Ljava/lang/Object;
/*      */     //   434: checkcast net/minecraft/entity/Entity
/*      */     //   437: astore #22
/*      */     //   439: iload #19
/*      */     //   441: ifeq -> 467
/*      */     //   444: aload #22
/*      */     //   446: getstatic net/optifine/reflect/Reflector.ForgeEntity_shouldRenderInPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   449: iconst_1
/*      */     //   450: anewarray java/lang/Object
/*      */     //   453: dup
/*      */     //   454: iconst_0
/*      */     //   455: iload #4
/*      */     //   457: invokestatic valueOf : (I)Ljava/lang/Integer;
/*      */     //   460: aastore
/*      */     //   461: invokestatic callBoolean : (Ljava/lang/Object;Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)Z
/*      */     //   464: ifeq -> 502
/*      */     //   467: aload_0
/*      */     //   468: dup
/*      */     //   469: getfield countEntitiesRendered : I
/*      */     //   472: iconst_1
/*      */     //   473: iadd
/*      */     //   474: putfield countEntitiesRendered : I
/*      */     //   477: aload #22
/*      */     //   479: dload #5
/*      */     //   481: dload #7
/*      */     //   483: dload #9
/*      */     //   485: invokevirtual isInRangeToRender3d : (DDD)Z
/*      */     //   488: ifeq -> 502
/*      */     //   491: aload_0
/*      */     //   492: getfield renderManager : Lnet/minecraft/client/renderer/entity/RenderManager;
/*      */     //   495: aload #22
/*      */     //   497: fload_3
/*      */     //   498: invokevirtual renderEntitySimple : (Lnet/minecraft/entity/Entity;F)Z
/*      */     //   501: pop
/*      */     //   502: iinc #21, 1
/*      */     //   505: iload #21
/*      */     //   507: aload_0
/*      */     //   508: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   511: getfield weatherEffects : Ljava/util/List;
/*      */     //   514: invokeinterface size : ()I
/*      */     //   519: if_icmplt -> 420
/*      */     //   522: aload_0
/*      */     //   523: invokevirtual isRenderEntityOutlines : ()Z
/*      */     //   526: ifeq -> 822
/*      */     //   529: sipush #519
/*      */     //   532: invokestatic depthFunc : (I)V
/*      */     //   535: invokestatic disableFog : ()V
/*      */     //   538: aload_0
/*      */     //   539: getfield entityOutlineFramebuffer : Lnet/minecraft/client/shader/Framebuffer;
/*      */     //   542: invokevirtual framebufferClear : ()V
/*      */     //   545: aload_0
/*      */     //   546: getfield entityOutlineFramebuffer : Lnet/minecraft/client/shader/Framebuffer;
/*      */     //   549: iconst_0
/*      */     //   550: invokevirtual bindFramebuffer : (Z)V
/*      */     //   553: aload_0
/*      */     //   554: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   557: getfield theProfiler : Lnet/minecraft/profiler/Profiler;
/*      */     //   560: ldc_w 'entityOutlines'
/*      */     //   563: invokevirtual endStartSection : (Ljava/lang/String;)V
/*      */     //   566: invokestatic disableStandardItemLighting : ()V
/*      */     //   569: aload_0
/*      */     //   570: getfield renderManager : Lnet/minecraft/client/renderer/entity/RenderManager;
/*      */     //   573: iconst_1
/*      */     //   574: invokevirtual setRenderOutlines : (Z)V
/*      */     //   577: iconst_0
/*      */     //   578: istore #21
/*      */     //   580: goto -> 748
/*      */     //   583: aload #18
/*      */     //   585: iload #21
/*      */     //   587: invokeinterface get : (I)Ljava/lang/Object;
/*      */     //   592: checkcast net/minecraft/entity/Entity
/*      */     //   595: astore #22
/*      */     //   597: aload_0
/*      */     //   598: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   601: invokevirtual getRenderViewEntity : ()Lnet/minecraft/entity/Entity;
/*      */     //   604: instanceof net/minecraft/entity/EntityLivingBase
/*      */     //   607: ifeq -> 630
/*      */     //   610: aload_0
/*      */     //   611: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   614: invokevirtual getRenderViewEntity : ()Lnet/minecraft/entity/Entity;
/*      */     //   617: checkcast net/minecraft/entity/EntityLivingBase
/*      */     //   620: invokevirtual isPlayerSleeping : ()Z
/*      */     //   623: ifeq -> 630
/*      */     //   626: iconst_1
/*      */     //   627: goto -> 631
/*      */     //   630: iconst_0
/*      */     //   631: istore #23
/*      */     //   633: aload #22
/*      */     //   635: dload #5
/*      */     //   637: dload #7
/*      */     //   639: dload #9
/*      */     //   641: invokevirtual isInRangeToRender3d : (DDD)Z
/*      */     //   644: ifeq -> 696
/*      */     //   647: aload #22
/*      */     //   649: getfield ignoreFrustumCheck : Z
/*      */     //   652: ifne -> 684
/*      */     //   655: aload_2
/*      */     //   656: aload #22
/*      */     //   658: invokevirtual getEntityBoundingBox : ()Lnet/minecraft/util/AxisAlignedBB;
/*      */     //   661: invokeinterface isBoundingBoxInFrustum : (Lnet/minecraft/util/AxisAlignedBB;)Z
/*      */     //   666: ifne -> 684
/*      */     //   669: aload #22
/*      */     //   671: getfield riddenByEntity : Lnet/minecraft/entity/Entity;
/*      */     //   674: aload_0
/*      */     //   675: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   678: getfield thePlayer : Lnet/minecraft/client/entity/EntityPlayerSP;
/*      */     //   681: if_acmpne -> 696
/*      */     //   684: aload #22
/*      */     //   686: instanceof net/minecraft/entity/player/EntityPlayer
/*      */     //   689: ifeq -> 696
/*      */     //   692: iconst_1
/*      */     //   693: goto -> 697
/*      */     //   696: iconst_0
/*      */     //   697: istore #24
/*      */     //   699: aload #22
/*      */     //   701: aload_0
/*      */     //   702: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   705: invokevirtual getRenderViewEntity : ()Lnet/minecraft/entity/Entity;
/*      */     //   708: if_acmpne -> 729
/*      */     //   711: aload_0
/*      */     //   712: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   715: getfield gameSettings : Lnet/minecraft/client/settings/GameSettings;
/*      */     //   718: getfield showDebugInfo : I
/*      */     //   721: ifne -> 729
/*      */     //   724: iload #23
/*      */     //   726: ifeq -> 745
/*      */     //   729: iload #24
/*      */     //   731: ifeq -> 745
/*      */     //   734: aload_0
/*      */     //   735: getfield renderManager : Lnet/minecraft/client/renderer/entity/RenderManager;
/*      */     //   738: aload #22
/*      */     //   740: fload_3
/*      */     //   741: invokevirtual renderEntitySimple : (Lnet/minecraft/entity/Entity;F)Z
/*      */     //   744: pop
/*      */     //   745: iinc #21, 1
/*      */     //   748: iload #21
/*      */     //   750: aload #18
/*      */     //   752: invokeinterface size : ()I
/*      */     //   757: if_icmplt -> 583
/*      */     //   760: aload_0
/*      */     //   761: getfield renderManager : Lnet/minecraft/client/renderer/entity/RenderManager;
/*      */     //   764: iconst_0
/*      */     //   765: invokevirtual setRenderOutlines : (Z)V
/*      */     //   768: invokestatic enableStandardItemLighting : ()V
/*      */     //   771: iconst_0
/*      */     //   772: invokestatic depthMask : (Z)V
/*      */     //   775: aload_0
/*      */     //   776: getfield entityOutlineShader : Lnet/minecraft/client/shader/ShaderGroup;
/*      */     //   779: fload_3
/*      */     //   780: invokevirtual loadShaderGroup : (F)V
/*      */     //   783: invokestatic enableLighting : ()V
/*      */     //   786: iconst_1
/*      */     //   787: invokestatic depthMask : (Z)V
/*      */     //   790: aload_0
/*      */     //   791: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   794: invokevirtual getFramebuffer : ()Lnet/minecraft/client/shader/Framebuffer;
/*      */     //   797: iconst_0
/*      */     //   798: invokevirtual bindFramebuffer : (Z)V
/*      */     //   801: invokestatic enableFog : ()V
/*      */     //   804: invokestatic enableBlend : ()V
/*      */     //   807: invokestatic enableColorMaterial : ()V
/*      */     //   810: sipush #515
/*      */     //   813: invokestatic depthFunc : (I)V
/*      */     //   816: invokestatic enableDepth : ()V
/*      */     //   819: invokestatic enableAlpha : ()V
/*      */     //   822: aload_0
/*      */     //   823: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   826: getfield theProfiler : Lnet/minecraft/profiler/Profiler;
/*      */     //   829: ldc_w 'entities'
/*      */     //   832: invokevirtual endStartSection : (Ljava/lang/String;)V
/*      */     //   835: invokestatic isShaders : ()Z
/*      */     //   838: istore #21
/*      */     //   840: iload #21
/*      */     //   842: ifeq -> 848
/*      */     //   845: invokestatic beginEntities : ()V
/*      */     //   848: invokestatic updateItemRenderDistance : ()V
/*      */     //   851: aload_0
/*      */     //   852: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   855: getfield gameSettings : Lnet/minecraft/client/settings/GameSettings;
/*      */     //   858: getfield fancyGraphics : Z
/*      */     //   861: istore #22
/*      */     //   863: aload_0
/*      */     //   864: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   867: getfield gameSettings : Lnet/minecraft/client/settings/GameSettings;
/*      */     //   870: invokestatic isDroppedItemsFancy : ()Z
/*      */     //   873: putfield fancyGraphics : Z
/*      */     //   876: getstatic net/optifine/shaders/Shaders.isShadowPass : Z
/*      */     //   879: ifeq -> 899
/*      */     //   882: aload_0
/*      */     //   883: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   886: getfield thePlayer : Lnet/minecraft/client/entity/EntityPlayerSP;
/*      */     //   889: invokevirtual isSpectator : ()Z
/*      */     //   892: ifne -> 899
/*      */     //   895: iconst_1
/*      */     //   896: goto -> 900
/*      */     //   899: iconst_0
/*      */     //   900: istore #23
/*      */     //   902: aload_0
/*      */     //   903: getfield renderInfosEntities : Ljava/util/List;
/*      */     //   906: invokeinterface iterator : ()Ljava/util/Iterator;
/*      */     //   911: astore #25
/*      */     //   913: goto -> 1309
/*      */     //   916: aload #25
/*      */     //   918: invokeinterface next : ()Ljava/lang/Object;
/*      */     //   923: astore #24
/*      */     //   925: aload #24
/*      */     //   927: checkcast net/minecraft/client/renderer/RenderGlobal$ContainerLocalRenderInformation
/*      */     //   930: astore #26
/*      */     //   932: aload #26
/*      */     //   934: getfield renderChunk : Lnet/minecraft/client/renderer/chunk/RenderChunk;
/*      */     //   937: invokevirtual getChunk : ()Lnet/minecraft/world/chunk/Chunk;
/*      */     //   940: astore #27
/*      */     //   942: aload #27
/*      */     //   944: invokevirtual getEntityLists : ()[Lnet/minecraft/util/ClassInheritanceMultiMap;
/*      */     //   947: aload #26
/*      */     //   949: getfield renderChunk : Lnet/minecraft/client/renderer/chunk/RenderChunk;
/*      */     //   952: invokevirtual getPosition : ()Lnet/minecraft/util/BlockPos;
/*      */     //   955: invokevirtual getY : ()I
/*      */     //   958: bipush #16
/*      */     //   960: idiv
/*      */     //   961: aaload
/*      */     //   962: astore #28
/*      */     //   964: aload #28
/*      */     //   966: invokevirtual isEmpty : ()Z
/*      */     //   969: ifne -> 1309
/*      */     //   972: aload #28
/*      */     //   974: invokevirtual iterator : ()Ljava/util/Iterator;
/*      */     //   977: astore #29
/*      */     //   979: aload #29
/*      */     //   981: invokeinterface hasNext : ()Z
/*      */     //   986: ifne -> 992
/*      */     //   989: goto -> 1309
/*      */     //   992: aload #29
/*      */     //   994: invokeinterface next : ()Ljava/lang/Object;
/*      */     //   999: checkcast net/minecraft/entity/Entity
/*      */     //   1002: astore #30
/*      */     //   1004: iload #19
/*      */     //   1006: ifeq -> 1032
/*      */     //   1009: aload #30
/*      */     //   1011: getstatic net/optifine/reflect/Reflector.ForgeEntity_shouldRenderInPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1014: iconst_1
/*      */     //   1015: anewarray java/lang/Object
/*      */     //   1018: dup
/*      */     //   1019: iconst_0
/*      */     //   1020: iload #4
/*      */     //   1022: invokestatic valueOf : (I)Ljava/lang/Integer;
/*      */     //   1025: aastore
/*      */     //   1026: invokestatic callBoolean : (Ljava/lang/Object;Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)Z
/*      */     //   1029: ifeq -> 979
/*      */     //   1032: aload_0
/*      */     //   1033: getfield renderManager : Lnet/minecraft/client/renderer/entity/RenderManager;
/*      */     //   1036: aload #30
/*      */     //   1038: aload_2
/*      */     //   1039: dload #5
/*      */     //   1041: dload #7
/*      */     //   1043: dload #9
/*      */     //   1045: invokevirtual shouldRender : (Lnet/minecraft/entity/Entity;Lnet/minecraft/client/renderer/culling/ICamera;DDD)Z
/*      */     //   1048: ifne -> 1070
/*      */     //   1051: aload #30
/*      */     //   1053: getfield riddenByEntity : Lnet/minecraft/entity/Entity;
/*      */     //   1056: aload_0
/*      */     //   1057: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   1060: getfield thePlayer : Lnet/minecraft/client/entity/EntityPlayerSP;
/*      */     //   1063: if_acmpeq -> 1070
/*      */     //   1066: iconst_0
/*      */     //   1067: goto -> 1071
/*      */     //   1070: iconst_1
/*      */     //   1071: istore #31
/*      */     //   1073: iload #31
/*      */     //   1075: ifne -> 1081
/*      */     //   1078: goto -> 1231
/*      */     //   1081: aload_0
/*      */     //   1082: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   1085: invokevirtual getRenderViewEntity : ()Lnet/minecraft/entity/Entity;
/*      */     //   1088: instanceof net/minecraft/entity/EntityLivingBase
/*      */     //   1091: ifeq -> 1110
/*      */     //   1094: aload_0
/*      */     //   1095: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   1098: invokevirtual getRenderViewEntity : ()Lnet/minecraft/entity/Entity;
/*      */     //   1101: checkcast net/minecraft/entity/EntityLivingBase
/*      */     //   1104: invokevirtual isPlayerSleeping : ()Z
/*      */     //   1107: goto -> 1111
/*      */     //   1110: iconst_0
/*      */     //   1111: istore #32
/*      */     //   1113: aload #30
/*      */     //   1115: aload_0
/*      */     //   1116: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   1119: invokevirtual getRenderViewEntity : ()Lnet/minecraft/entity/Entity;
/*      */     //   1122: if_acmpne -> 1148
/*      */     //   1125: iload #23
/*      */     //   1127: ifne -> 1148
/*      */     //   1130: aload_0
/*      */     //   1131: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   1134: getfield gameSettings : Lnet/minecraft/client/settings/GameSettings;
/*      */     //   1137: getfield showDebugInfo : I
/*      */     //   1140: ifne -> 1148
/*      */     //   1143: iload #32
/*      */     //   1145: ifeq -> 979
/*      */     //   1148: aload #30
/*      */     //   1150: getfield posY : D
/*      */     //   1153: dconst_0
/*      */     //   1154: dcmpg
/*      */     //   1155: iflt -> 1189
/*      */     //   1158: aload #30
/*      */     //   1160: getfield posY : D
/*      */     //   1163: ldc2_w 256.0
/*      */     //   1166: dcmpl
/*      */     //   1167: ifge -> 1189
/*      */     //   1170: aload_0
/*      */     //   1171: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   1174: new net/minecraft/util/BlockPos
/*      */     //   1177: dup
/*      */     //   1178: aload #30
/*      */     //   1180: invokespecial <init> : (Lnet/minecraft/entity/Entity;)V
/*      */     //   1183: invokevirtual isBlockLoaded : (Lnet/minecraft/util/BlockPos;)Z
/*      */     //   1186: ifeq -> 979
/*      */     //   1189: aload_0
/*      */     //   1190: dup
/*      */     //   1191: getfield countEntitiesRendered : I
/*      */     //   1194: iconst_1
/*      */     //   1195: iadd
/*      */     //   1196: putfield countEntitiesRendered : I
/*      */     //   1199: aload_0
/*      */     //   1200: aload #30
/*      */     //   1202: putfield renderedEntity : Lnet/minecraft/entity/Entity;
/*      */     //   1205: iload #21
/*      */     //   1207: ifeq -> 1215
/*      */     //   1210: aload #30
/*      */     //   1212: invokestatic nextEntity : (Lnet/minecraft/entity/Entity;)V
/*      */     //   1215: aload_0
/*      */     //   1216: getfield renderManager : Lnet/minecraft/client/renderer/entity/RenderManager;
/*      */     //   1219: aload #30
/*      */     //   1221: fload_3
/*      */     //   1222: invokevirtual renderEntitySimple : (Lnet/minecraft/entity/Entity;F)Z
/*      */     //   1225: pop
/*      */     //   1226: aload_0
/*      */     //   1227: aconst_null
/*      */     //   1228: putfield renderedEntity : Lnet/minecraft/entity/Entity;
/*      */     //   1231: iload #31
/*      */     //   1233: ifne -> 979
/*      */     //   1236: aload #30
/*      */     //   1238: instanceof net/minecraft/entity/projectile/EntityWitherSkull
/*      */     //   1241: ifeq -> 979
/*      */     //   1244: iload #19
/*      */     //   1246: ifeq -> 1272
/*      */     //   1249: aload #30
/*      */     //   1251: getstatic net/optifine/reflect/Reflector.ForgeEntity_shouldRenderInPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1254: iconst_1
/*      */     //   1255: anewarray java/lang/Object
/*      */     //   1258: dup
/*      */     //   1259: iconst_0
/*      */     //   1260: iload #4
/*      */     //   1262: invokestatic valueOf : (I)Ljava/lang/Integer;
/*      */     //   1265: aastore
/*      */     //   1266: invokestatic callBoolean : (Ljava/lang/Object;Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)Z
/*      */     //   1269: ifeq -> 979
/*      */     //   1272: aload_0
/*      */     //   1273: aload #30
/*      */     //   1275: putfield renderedEntity : Lnet/minecraft/entity/Entity;
/*      */     //   1278: iload #21
/*      */     //   1280: ifeq -> 1288
/*      */     //   1283: aload #30
/*      */     //   1285: invokestatic nextEntity : (Lnet/minecraft/entity/Entity;)V
/*      */     //   1288: aload_0
/*      */     //   1289: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   1292: invokevirtual getRenderManager : ()Lnet/minecraft/client/renderer/entity/RenderManager;
/*      */     //   1295: aload #30
/*      */     //   1297: fload_3
/*      */     //   1298: invokevirtual renderWitherSkull : (Lnet/minecraft/entity/Entity;F)V
/*      */     //   1301: aload_0
/*      */     //   1302: aconst_null
/*      */     //   1303: putfield renderedEntity : Lnet/minecraft/entity/Entity;
/*      */     //   1306: goto -> 979
/*      */     //   1309: aload #25
/*      */     //   1311: invokeinterface hasNext : ()Z
/*      */     //   1316: ifne -> 916
/*      */     //   1319: aload_0
/*      */     //   1320: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   1323: getfield gameSettings : Lnet/minecraft/client/settings/GameSettings;
/*      */     //   1326: iload #22
/*      */     //   1328: putfield fancyGraphics : Z
/*      */     //   1331: iload #21
/*      */     //   1333: ifeq -> 1342
/*      */     //   1336: invokestatic endEntities : ()V
/*      */     //   1339: invokestatic beginBlockEntities : ()V
/*      */     //   1342: aload_0
/*      */     //   1343: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   1346: getfield theProfiler : Lnet/minecraft/profiler/Profiler;
/*      */     //   1349: ldc_w 'blockentities'
/*      */     //   1352: invokevirtual endStartSection : (Ljava/lang/String;)V
/*      */     //   1355: invokestatic enableStandardItemLighting : ()V
/*      */     //   1358: getstatic net/optifine/reflect/Reflector.ForgeTileEntity_hasFastRenderer : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1361: invokevirtual exists : ()Z
/*      */     //   1364: ifeq -> 1373
/*      */     //   1367: getstatic net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.instance : Lnet/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher;
/*      */     //   1370: invokevirtual preDrawBatch : ()V
/*      */     //   1373: invokestatic updateTextRenderDistance : ()V
/*      */     //   1376: aload_0
/*      */     //   1377: getfield renderInfosTileEntities : Ljava/util/List;
/*      */     //   1380: invokeinterface iterator : ()Ljava/util/Iterator;
/*      */     //   1385: astore #25
/*      */     //   1387: goto -> 1560
/*      */     //   1390: aload #25
/*      */     //   1392: invokeinterface next : ()Ljava/lang/Object;
/*      */     //   1397: astore #24
/*      */     //   1399: aload #24
/*      */     //   1401: checkcast net/minecraft/client/renderer/RenderGlobal$ContainerLocalRenderInformation
/*      */     //   1404: astore #26
/*      */     //   1406: aload #26
/*      */     //   1408: getfield renderChunk : Lnet/minecraft/client/renderer/chunk/RenderChunk;
/*      */     //   1411: invokevirtual getCompiledChunk : ()Lnet/minecraft/client/renderer/chunk/CompiledChunk;
/*      */     //   1414: invokevirtual getTileEntities : ()Ljava/util/List;
/*      */     //   1417: astore #27
/*      */     //   1419: aload #27
/*      */     //   1421: invokeinterface isEmpty : ()Z
/*      */     //   1426: ifne -> 1560
/*      */     //   1429: aload #27
/*      */     //   1431: invokeinterface iterator : ()Ljava/util/Iterator;
/*      */     //   1436: astore #28
/*      */     //   1438: aload #28
/*      */     //   1440: invokeinterface hasNext : ()Z
/*      */     //   1445: ifne -> 1451
/*      */     //   1448: goto -> 1560
/*      */     //   1451: aload #28
/*      */     //   1453: invokeinterface next : ()Ljava/lang/Object;
/*      */     //   1458: checkcast net/minecraft/tileentity/TileEntity
/*      */     //   1461: astore #29
/*      */     //   1463: iload #20
/*      */     //   1465: ifne -> 1471
/*      */     //   1468: goto -> 1527
/*      */     //   1471: aload #29
/*      */     //   1473: getstatic net/optifine/reflect/Reflector.ForgeTileEntity_shouldRenderInPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1476: iconst_1
/*      */     //   1477: anewarray java/lang/Object
/*      */     //   1480: dup
/*      */     //   1481: iconst_0
/*      */     //   1482: iload #4
/*      */     //   1484: invokestatic valueOf : (I)Ljava/lang/Integer;
/*      */     //   1487: aastore
/*      */     //   1488: invokestatic callBoolean : (Ljava/lang/Object;Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)Z
/*      */     //   1491: ifeq -> 1438
/*      */     //   1494: aload #29
/*      */     //   1496: getstatic net/optifine/reflect/Reflector.ForgeTileEntity_getRenderBoundingBox : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1499: iconst_0
/*      */     //   1500: anewarray java/lang/Object
/*      */     //   1503: invokestatic call : (Ljava/lang/Object;Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)Ljava/lang/Object;
/*      */     //   1506: checkcast net/minecraft/util/AxisAlignedBB
/*      */     //   1509: astore #30
/*      */     //   1511: aload #30
/*      */     //   1513: ifnull -> 1527
/*      */     //   1516: aload_2
/*      */     //   1517: aload #30
/*      */     //   1519: invokeinterface isBoundingBoxInFrustum : (Lnet/minecraft/util/AxisAlignedBB;)Z
/*      */     //   1524: ifeq -> 1438
/*      */     //   1527: iload #21
/*      */     //   1529: ifeq -> 1537
/*      */     //   1532: aload #29
/*      */     //   1534: invokestatic nextBlockEntity : (Lnet/minecraft/tileentity/TileEntity;)V
/*      */     //   1537: getstatic net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.instance : Lnet/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher;
/*      */     //   1540: aload #29
/*      */     //   1542: fload_3
/*      */     //   1543: iconst_m1
/*      */     //   1544: invokevirtual renderTileEntity : (Lnet/minecraft/tileentity/TileEntity;FI)V
/*      */     //   1547: aload_0
/*      */     //   1548: dup
/*      */     //   1549: getfield countTileEntitiesRendered : I
/*      */     //   1552: iconst_1
/*      */     //   1553: iadd
/*      */     //   1554: putfield countTileEntitiesRendered : I
/*      */     //   1557: goto -> 1438
/*      */     //   1560: aload #25
/*      */     //   1562: invokeinterface hasNext : ()Z
/*      */     //   1567: ifne -> 1390
/*      */     //   1570: aload_0
/*      */     //   1571: getfield setTileEntities : Ljava/util/Set;
/*      */     //   1574: dup
/*      */     //   1575: astore #24
/*      */     //   1577: monitorenter
/*      */     //   1578: aload_0
/*      */     //   1579: getfield setTileEntities : Ljava/util/Set;
/*      */     //   1582: invokeinterface iterator : ()Ljava/util/Iterator;
/*      */     //   1587: astore #26
/*      */     //   1589: goto -> 1652
/*      */     //   1592: aload #26
/*      */     //   1594: invokeinterface next : ()Ljava/lang/Object;
/*      */     //   1599: checkcast net/minecraft/tileentity/TileEntity
/*      */     //   1602: astore #25
/*      */     //   1604: iload #20
/*      */     //   1606: ifeq -> 1632
/*      */     //   1609: aload #25
/*      */     //   1611: getstatic net/optifine/reflect/Reflector.ForgeTileEntity_shouldRenderInPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1614: iconst_1
/*      */     //   1615: anewarray java/lang/Object
/*      */     //   1618: dup
/*      */     //   1619: iconst_0
/*      */     //   1620: iload #4
/*      */     //   1622: invokestatic valueOf : (I)Ljava/lang/Integer;
/*      */     //   1625: aastore
/*      */     //   1626: invokestatic callBoolean : (Ljava/lang/Object;Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)Z
/*      */     //   1629: ifeq -> 1652
/*      */     //   1632: iload #21
/*      */     //   1634: ifeq -> 1642
/*      */     //   1637: aload #25
/*      */     //   1639: invokestatic nextBlockEntity : (Lnet/minecraft/tileentity/TileEntity;)V
/*      */     //   1642: getstatic net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.instance : Lnet/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher;
/*      */     //   1645: aload #25
/*      */     //   1647: fload_3
/*      */     //   1648: iconst_m1
/*      */     //   1649: invokevirtual renderTileEntity : (Lnet/minecraft/tileentity/TileEntity;FI)V
/*      */     //   1652: aload #26
/*      */     //   1654: invokeinterface hasNext : ()Z
/*      */     //   1659: ifne -> 1592
/*      */     //   1662: aload #24
/*      */     //   1664: monitorexit
/*      */     //   1665: goto -> 1672
/*      */     //   1668: aload #24
/*      */     //   1670: monitorexit
/*      */     //   1671: athrow
/*      */     //   1672: getstatic net/optifine/reflect/Reflector.ForgeTileEntity_hasFastRenderer : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1675: invokevirtual exists : ()Z
/*      */     //   1678: ifeq -> 1689
/*      */     //   1681: getstatic net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.instance : Lnet/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher;
/*      */     //   1684: iload #4
/*      */     //   1686: invokevirtual drawBatch : (I)V
/*      */     //   1689: aload_0
/*      */     //   1690: iconst_1
/*      */     //   1691: putfield renderOverlayDamaged : Z
/*      */     //   1694: aload_0
/*      */     //   1695: invokespecial preRenderDamagedBlocks : ()V
/*      */     //   1698: aload_0
/*      */     //   1699: getfield damagedBlocks : Ljava/util/Map;
/*      */     //   1702: invokeinterface values : ()Ljava/util/Collection;
/*      */     //   1707: invokeinterface iterator : ()Ljava/util/Iterator;
/*      */     //   1712: astore #25
/*      */     //   1714: goto -> 1998
/*      */     //   1717: aload #25
/*      */     //   1719: invokeinterface next : ()Ljava/lang/Object;
/*      */     //   1724: checkcast net/minecraft/client/renderer/DestroyBlockProgress
/*      */     //   1727: astore #24
/*      */     //   1729: aload #24
/*      */     //   1731: invokevirtual getPosition : ()Lnet/minecraft/util/BlockPos;
/*      */     //   1734: astore #26
/*      */     //   1736: aload_0
/*      */     //   1737: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   1740: aload #26
/*      */     //   1742: invokevirtual getTileEntity : (Lnet/minecraft/util/BlockPos;)Lnet/minecraft/tileentity/TileEntity;
/*      */     //   1745: astore #27
/*      */     //   1747: aload #27
/*      */     //   1749: instanceof net/minecraft/tileentity/TileEntityChest
/*      */     //   1752: ifeq -> 1823
/*      */     //   1755: aload #27
/*      */     //   1757: checkcast net/minecraft/tileentity/TileEntityChest
/*      */     //   1760: astore #28
/*      */     //   1762: aload #28
/*      */     //   1764: getfield adjacentChestXNeg : Lnet/minecraft/tileentity/TileEntityChest;
/*      */     //   1767: ifnull -> 1794
/*      */     //   1770: aload #26
/*      */     //   1772: getstatic net/minecraft/util/EnumFacing.WEST : Lnet/minecraft/util/EnumFacing;
/*      */     //   1775: invokevirtual offset : (Lnet/minecraft/util/EnumFacing;)Lnet/minecraft/util/BlockPos;
/*      */     //   1778: astore #26
/*      */     //   1780: aload_0
/*      */     //   1781: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   1784: aload #26
/*      */     //   1786: invokevirtual getTileEntity : (Lnet/minecraft/util/BlockPos;)Lnet/minecraft/tileentity/TileEntity;
/*      */     //   1789: astore #27
/*      */     //   1791: goto -> 1823
/*      */     //   1794: aload #28
/*      */     //   1796: getfield adjacentChestZNeg : Lnet/minecraft/tileentity/TileEntityChest;
/*      */     //   1799: ifnull -> 1823
/*      */     //   1802: aload #26
/*      */     //   1804: getstatic net/minecraft/util/EnumFacing.NORTH : Lnet/minecraft/util/EnumFacing;
/*      */     //   1807: invokevirtual offset : (Lnet/minecraft/util/EnumFacing;)Lnet/minecraft/util/BlockPos;
/*      */     //   1810: astore #26
/*      */     //   1812: aload_0
/*      */     //   1813: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   1816: aload #26
/*      */     //   1818: invokevirtual getTileEntity : (Lnet/minecraft/util/BlockPos;)Lnet/minecraft/tileentity/TileEntity;
/*      */     //   1821: astore #27
/*      */     //   1823: aload_0
/*      */     //   1824: getfield theWorld : Lnet/minecraft/client/multiplayer/WorldClient;
/*      */     //   1827: aload #26
/*      */     //   1829: invokevirtual getBlockState : (Lnet/minecraft/util/BlockPos;)Lnet/minecraft/block/state/IBlockState;
/*      */     //   1832: invokeinterface getBlock : ()Lnet/minecraft/block/Block;
/*      */     //   1837: astore #28
/*      */     //   1839: iload #20
/*      */     //   1841: ifeq -> 1925
/*      */     //   1844: iconst_0
/*      */     //   1845: istore #29
/*      */     //   1847: aload #27
/*      */     //   1849: ifnull -> 1969
/*      */     //   1852: aload #27
/*      */     //   1854: getstatic net/optifine/reflect/Reflector.ForgeTileEntity_shouldRenderInPass : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1857: iconst_1
/*      */     //   1858: anewarray java/lang/Object
/*      */     //   1861: dup
/*      */     //   1862: iconst_0
/*      */     //   1863: iload #4
/*      */     //   1865: invokestatic valueOf : (I)Ljava/lang/Integer;
/*      */     //   1868: aastore
/*      */     //   1869: invokestatic callBoolean : (Ljava/lang/Object;Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)Z
/*      */     //   1872: ifeq -> 1969
/*      */     //   1875: aload #27
/*      */     //   1877: getstatic net/optifine/reflect/Reflector.ForgeTileEntity_canRenderBreaking : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1880: iconst_0
/*      */     //   1881: anewarray java/lang/Object
/*      */     //   1884: invokestatic callBoolean : (Ljava/lang/Object;Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)Z
/*      */     //   1887: ifeq -> 1969
/*      */     //   1890: aload #27
/*      */     //   1892: getstatic net/optifine/reflect/Reflector.ForgeTileEntity_getRenderBoundingBox : Lnet/optifine/reflect/ReflectorMethod;
/*      */     //   1895: iconst_0
/*      */     //   1896: anewarray java/lang/Object
/*      */     //   1899: invokestatic call : (Ljava/lang/Object;Lnet/optifine/reflect/ReflectorMethod;[Ljava/lang/Object;)Ljava/lang/Object;
/*      */     //   1902: checkcast net/minecraft/util/AxisAlignedBB
/*      */     //   1905: astore #30
/*      */     //   1907: aload #30
/*      */     //   1909: ifnull -> 1969
/*      */     //   1912: aload_2
/*      */     //   1913: aload #30
/*      */     //   1915: invokeinterface isBoundingBoxInFrustum : (Lnet/minecraft/util/AxisAlignedBB;)Z
/*      */     //   1920: istore #29
/*      */     //   1922: goto -> 1969
/*      */     //   1925: aload #27
/*      */     //   1927: ifnull -> 1966
/*      */     //   1930: aload #28
/*      */     //   1932: instanceof net/minecraft/block/BlockChest
/*      */     //   1935: ifne -> 1962
/*      */     //   1938: aload #28
/*      */     //   1940: instanceof net/minecraft/block/BlockEnderChest
/*      */     //   1943: ifne -> 1962
/*      */     //   1946: aload #28
/*      */     //   1948: instanceof net/minecraft/block/BlockSign
/*      */     //   1951: ifne -> 1962
/*      */     //   1954: aload #28
/*      */     //   1956: instanceof net/minecraft/block/BlockSkull
/*      */     //   1959: ifeq -> 1966
/*      */     //   1962: iconst_1
/*      */     //   1963: goto -> 1967
/*      */     //   1966: iconst_0
/*      */     //   1967: istore #29
/*      */     //   1969: iload #29
/*      */     //   1971: ifeq -> 1998
/*      */     //   1974: iload #21
/*      */     //   1976: ifeq -> 1984
/*      */     //   1979: aload #27
/*      */     //   1981: invokestatic nextBlockEntity : (Lnet/minecraft/tileentity/TileEntity;)V
/*      */     //   1984: getstatic net/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.instance : Lnet/minecraft/client/renderer/tileentity/TileEntityRendererDispatcher;
/*      */     //   1987: aload #27
/*      */     //   1989: fload_3
/*      */     //   1990: aload #24
/*      */     //   1992: invokevirtual getPartialBlockDamage : ()I
/*      */     //   1995: invokevirtual renderTileEntity : (Lnet/minecraft/tileentity/TileEntity;FI)V
/*      */     //   1998: aload #25
/*      */     //   2000: invokeinterface hasNext : ()Z
/*      */     //   2005: ifne -> 1717
/*      */     //   2008: aload_0
/*      */     //   2009: invokespecial postRenderDamagedBlocks : ()V
/*      */     //   2012: aload_0
/*      */     //   2013: iconst_0
/*      */     //   2014: putfield renderOverlayDamaged : Z
/*      */     //   2017: iload #21
/*      */     //   2019: ifeq -> 2025
/*      */     //   2022: invokestatic endBlockEntities : ()V
/*      */     //   2025: getstatic net/minecraft/client/renderer/RenderGlobal.renderEntitiesCounter : I
/*      */     //   2028: iconst_1
/*      */     //   2029: isub
/*      */     //   2030: putstatic net/minecraft/client/renderer/RenderGlobal.renderEntitiesCounter : I
/*      */     //   2033: aload_0
/*      */     //   2034: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   2037: getfield entityRenderer : Lnet/minecraft/client/renderer/EntityRenderer;
/*      */     //   2040: invokevirtual disableLightmap : ()V
/*      */     //   2043: aload_0
/*      */     //   2044: getfield mc : Lnet/minecraft/client/Minecraft;
/*      */     //   2047: getfield mcProfiler : Lnet/minecraft/profiler/Profiler;
/*      */     //   2050: invokevirtual endSection : ()V
/*      */     //   2053: return
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #4030	-> 0
/*      */     //   #4032	-> 3
/*      */     //   #4033	-> 12
/*      */     //   #4036	-> 24
/*      */     //   #4037	-> 31
/*      */     //   #4038	-> 36
/*      */     //   #4041	-> 37
/*      */     //   #4042	-> 47
/*      */     //   #4043	-> 50
/*      */     //   #4044	-> 69
/*      */     //   #4045	-> 88
/*      */     //   #4046	-> 107
/*      */     //   #4047	-> 120
/*      */     //   #4048	-> 152
/*      */     //   #4049	-> 192
/*      */     //   #4051	-> 200
/*      */     //   #4052	-> 205
/*      */     //   #4053	-> 210
/*      */     //   #4054	-> 215
/*      */     //   #4055	-> 220
/*      */     //   #4058	-> 225
/*      */     //   #4059	-> 234
/*      */     //   #4060	-> 256
/*      */     //   #4061	-> 278
/*      */     //   #4062	-> 300
/*      */     //   #4063	-> 305
/*      */     //   #4064	-> 310
/*      */     //   #4065	-> 315
/*      */     //   #4066	-> 328
/*      */     //   #4067	-> 338
/*      */     //   #4068	-> 351
/*      */     //   #4070	-> 360
/*      */     //   #4071	-> 365
/*      */     //   #4074	-> 376
/*      */     //   #4075	-> 395
/*      */     //   #4078	-> 398
/*      */     //   #4079	-> 406
/*      */     //   #4081	-> 414
/*      */     //   #4082	-> 420
/*      */     //   #4084	-> 439
/*      */     //   #4085	-> 467
/*      */     //   #4087	-> 477
/*      */     //   #4088	-> 491
/*      */     //   #4081	-> 502
/*      */     //   #4093	-> 522
/*      */     //   #4094	-> 529
/*      */     //   #4095	-> 535
/*      */     //   #4096	-> 538
/*      */     //   #4097	-> 545
/*      */     //   #4098	-> 553
/*      */     //   #4099	-> 566
/*      */     //   #4100	-> 569
/*      */     //   #4102	-> 577
/*      */     //   #4103	-> 583
/*      */     //   #4104	-> 597
/*      */     //   #4105	-> 633
/*      */     //   #4107	-> 699
/*      */     //   #4108	-> 734
/*      */     //   #4102	-> 745
/*      */     //   #4112	-> 760
/*      */     //   #4113	-> 768
/*      */     //   #4114	-> 771
/*      */     //   #4115	-> 775
/*      */     //   #4116	-> 783
/*      */     //   #4117	-> 786
/*      */     //   #4118	-> 790
/*      */     //   #4119	-> 801
/*      */     //   #4120	-> 804
/*      */     //   #4121	-> 807
/*      */     //   #4122	-> 810
/*      */     //   #4123	-> 816
/*      */     //   #4124	-> 819
/*      */     //   #4127	-> 822
/*      */     //   #4128	-> 835
/*      */     //   #4130	-> 840
/*      */     //   #4131	-> 845
/*      */     //   #4134	-> 848
/*      */     //   #4135	-> 851
/*      */     //   #4136	-> 863
/*      */     //   #4137	-> 876
/*      */     //   #4140	-> 902
/*      */     //   #4141	-> 925
/*      */     //   #4142	-> 932
/*      */     //   #4143	-> 942
/*      */     //   #4145	-> 964
/*      */     //   #4146	-> 972
/*      */     //   #4153	-> 979
/*      */     //   #4154	-> 989
/*      */     //   #4157	-> 992
/*      */     //   #4159	-> 1004
/*      */     //   #4160	-> 1032
/*      */     //   #4162	-> 1073
/*      */     //   #4163	-> 1078
/*      */     //   #4166	-> 1081
/*      */     //   #4168	-> 1113
/*      */     //   #4169	-> 1189
/*      */     //   #4170	-> 1199
/*      */     //   #4172	-> 1205
/*      */     //   #4173	-> 1210
/*      */     //   #4176	-> 1215
/*      */     //   #4177	-> 1226
/*      */     //   #4183	-> 1231
/*      */     //   #4184	-> 1272
/*      */     //   #4186	-> 1278
/*      */     //   #4187	-> 1283
/*      */     //   #4190	-> 1288
/*      */     //   #4191	-> 1301
/*      */     //   #4148	-> 1306
/*      */     //   #4140	-> 1309
/*      */     //   #4197	-> 1319
/*      */     //   #4199	-> 1331
/*      */     //   #4200	-> 1336
/*      */     //   #4201	-> 1339
/*      */     //   #4204	-> 1342
/*      */     //   #4205	-> 1355
/*      */     //   #4207	-> 1358
/*      */     //   #4208	-> 1367
/*      */     //   #4211	-> 1373
/*      */     //   #4214	-> 1376
/*      */     //   #4215	-> 1399
/*      */     //   #4216	-> 1406
/*      */     //   #4218	-> 1419
/*      */     //   #4219	-> 1429
/*      */     //   #4225	-> 1438
/*      */     //   #4226	-> 1448
/*      */     //   #4229	-> 1451
/*      */     //   #4231	-> 1463
/*      */     //   #4232	-> 1468
/*      */     //   #4235	-> 1471
/*      */     //   #4236	-> 1494
/*      */     //   #4238	-> 1511
/*      */     //   #4244	-> 1527
/*      */     //   #4245	-> 1532
/*      */     //   #4248	-> 1537
/*      */     //   #4249	-> 1547
/*      */     //   #4221	-> 1557
/*      */     //   #4214	-> 1560
/*      */     //   #4254	-> 1570
/*      */     //   #4255	-> 1578
/*      */     //   #4256	-> 1604
/*      */     //   #4257	-> 1632
/*      */     //   #4258	-> 1637
/*      */     //   #4261	-> 1642
/*      */     //   #4255	-> 1652
/*      */     //   #4254	-> 1662
/*      */     //   #4266	-> 1672
/*      */     //   #4267	-> 1681
/*      */     //   #4270	-> 1689
/*      */     //   #4271	-> 1694
/*      */     //   #4273	-> 1698
/*      */     //   #4274	-> 1729
/*      */     //   #4275	-> 1736
/*      */     //   #4277	-> 1747
/*      */     //   #4278	-> 1755
/*      */     //   #4280	-> 1762
/*      */     //   #4281	-> 1770
/*      */     //   #4282	-> 1780
/*      */     //   #4283	-> 1791
/*      */     //   #4284	-> 1802
/*      */     //   #4285	-> 1812
/*      */     //   #4289	-> 1823
/*      */     //   #4292	-> 1839
/*      */     //   #4293	-> 1844
/*      */     //   #4295	-> 1847
/*      */     //   #4296	-> 1890
/*      */     //   #4298	-> 1907
/*      */     //   #4299	-> 1912
/*      */     //   #4302	-> 1922
/*      */     //   #4303	-> 1925
/*      */     //   #4306	-> 1969
/*      */     //   #4307	-> 1974
/*      */     //   #4308	-> 1979
/*      */     //   #4311	-> 1984
/*      */     //   #4273	-> 1998
/*      */     //   #4315	-> 2008
/*      */     //   #4316	-> 2012
/*      */     //   #4318	-> 2017
/*      */     //   #4319	-> 2022
/*      */     //   #4322	-> 2025
/*      */     //   #4323	-> 2033
/*      */     //   #4324	-> 2043
/*      */     //   #4326	-> 2053
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   0	2054	0	this	Lnet/minecraft/client/renderer/RenderGlobal;
/*      */     //   0	2054	1	renderViewEntity	Lnet/minecraft/entity/Entity;
/*      */     //   0	2054	2	camera	Lnet/minecraft/client/renderer/culling/ICamera;
/*      */     //   0	2054	3	partialTicks	F
/*      */     //   3	2051	4	i	I
/*      */     //   69	1984	5	d0	D
/*      */     //   88	1965	7	d1	D
/*      */     //   107	1946	9	d2	D
/*      */     //   234	1819	11	entity	Lnet/minecraft/entity/Entity;
/*      */     //   256	1797	12	d3	D
/*      */     //   278	1775	14	d4	D
/*      */     //   300	1753	16	d5	D
/*      */     //   360	1693	18	list	Ljava/util/List;
/*      */     //   406	1647	19	flag	Z
/*      */     //   414	1639	20	flag1	Z
/*      */     //   417	105	21	j	I
/*      */     //   439	63	22	entity1	Lnet/minecraft/entity/Entity;
/*      */     //   580	180	21	k	I
/*      */     //   597	148	22	entity3	Lnet/minecraft/entity/Entity;
/*      */     //   633	112	23	flag2	Z
/*      */     //   699	46	24	flag3	Z
/*      */     //   840	1213	21	flag6	Z
/*      */     //   863	1190	22	flag7	Z
/*      */     //   902	1151	23	flag8	Z
/*      */     //   925	384	24	renderglobal$containerlocalrenderinformation0	Ljava/lang/Object;
/*      */     //   932	377	26	renderglobal$containerlocalrenderinformation	Lnet/minecraft/client/renderer/RenderGlobal$ContainerLocalRenderInformation;
/*      */     //   942	367	27	chunk	Lnet/minecraft/world/chunk/Chunk;
/*      */     //   964	345	28	classinheritancemultimap	Lnet/minecraft/util/ClassInheritanceMultiMap;
/*      */     //   979	330	29	iterator	Ljava/util/Iterator;
/*      */     //   1004	302	30	entity2	Lnet/minecraft/entity/Entity;
/*      */     //   1073	233	31	flag4	Z
/*      */     //   1113	118	32	flag5	Z
/*      */     //   1399	161	24	renderglobal$containerlocalrenderinformation10	Ljava/lang/Object;
/*      */     //   1406	154	26	renderglobal$containerlocalrenderinformation1	Lnet/minecraft/client/renderer/RenderGlobal$ContainerLocalRenderInformation;
/*      */     //   1419	141	27	list1	Ljava/util/List;
/*      */     //   1438	122	28	iterator1	Ljava/util/Iterator;
/*      */     //   1463	94	29	tileentity1	Lnet/minecraft/tileentity/TileEntity;
/*      */     //   1511	16	30	axisalignedbb1	Lnet/minecraft/util/AxisAlignedBB;
/*      */     //   1604	48	25	tileentity	Lnet/minecraft/tileentity/TileEntity;
/*      */     //   1729	269	24	destroyblockprogress	Lnet/minecraft/client/renderer/DestroyBlockProgress;
/*      */     //   1736	262	26	blockpos	Lnet/minecraft/util/BlockPos;
/*      */     //   1747	251	27	tileentity2	Lnet/minecraft/tileentity/TileEntity;
/*      */     //   1762	61	28	tileentitychest	Lnet/minecraft/tileentity/TileEntityChest;
/*      */     //   1839	159	28	block	Lnet/minecraft/block/Block;
/*      */     //   1847	78	29	flag9	Z
/*      */     //   1969	29	29	flag9	Z
/*      */     //   1907	15	30	axisalignedbb	Lnet/minecraft/util/AxisAlignedBB;
/*      */     // Local variable type table:
/*      */     //   start	length	slot	name	signature
/*      */     //   360	1693	18	list	Ljava/util/List<Lnet/minecraft/entity/Entity;>;
/*      */     //   964	345	28	classinheritancemultimap	Lnet/minecraft/util/ClassInheritanceMultiMap<Lnet/minecraft/entity/Entity;>;
/*      */     //   1419	141	27	list1	Ljava/util/List<Lnet/minecraft/tileentity/TileEntity;>;
/*      */     // Exception table:
/*      */     //   from	to	target	type
/*      */     //   1578	1665	1668	finally
/*      */     //   1668	1671	1668	finally
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getDebugInfoRenders() {
/* 4332 */     int i = this.viewFrustum.renderChunks.length;
/* 4333 */     int j = 0;
/*      */     
/* 4335 */     for (ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos) {
/* 4336 */       CompiledChunk compiledchunk = renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk;
/*      */       
/* 4338 */       if (compiledchunk != CompiledChunk.DUMMY && !compiledchunk.isEmpty()) {
/* 4339 */         j++;
/*      */       }
/*      */     } 
/*      */     
/* 4343 */     return String.format("C: %d/%d %sD: %d, %s", new Object[] { Integer.valueOf(j), Integer.valueOf(i), this.mc.renderChunksMany ? "(s) " : "", Integer.valueOf(this.renderDistanceChunks), this.renderDispatcher.getDebugInfo() });
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getDebugInfoEntities() {
/* 4350 */     return "E: " + this.countEntitiesRendered + "/" + this.countEntitiesTotal + ", B: " + this.countEntitiesHidden + ", I: " + (this.countEntitiesTotal - this.countEntitiesHidden - this.countEntitiesRendered) + ", " + Config.getVersionDebug();
/*      */   }
/*      */   public void setupTerrain(Entity viewEntity, double partialTicks, ICamera camera, int frameCount, boolean playerSpectator) {
/*      */     Frustum frustum;
/* 4354 */     if (this.mc.gameSettings.renderDistanceChunks != this.renderDistanceChunks) {
/* 4355 */       loadRenderers();
/*      */     }
/*      */     
/* 4358 */     this.theWorld.theProfiler.startSection("camera");
/* 4359 */     double d0 = viewEntity.posX - this.frustumUpdatePosX;
/* 4360 */     double d1 = viewEntity.posY - this.frustumUpdatePosY;
/* 4361 */     double d2 = viewEntity.posZ - this.frustumUpdatePosZ;
/*      */     
/* 4363 */     if (this.frustumUpdatePosChunkX != viewEntity.chunkCoordX || this.frustumUpdatePosChunkY != viewEntity.chunkCoordY || this.frustumUpdatePosChunkZ != viewEntity.chunkCoordZ || d0 * d0 + d1 * d1 + d2 * d2 > 16.0D) {
/* 4364 */       this.frustumUpdatePosX = viewEntity.posX;
/* 4365 */       this.frustumUpdatePosY = viewEntity.posY;
/* 4366 */       this.frustumUpdatePosZ = viewEntity.posZ;
/* 4367 */       this.frustumUpdatePosChunkX = viewEntity.chunkCoordX;
/* 4368 */       this.frustumUpdatePosChunkY = viewEntity.chunkCoordY;
/* 4369 */       this.frustumUpdatePosChunkZ = viewEntity.chunkCoordZ;
/* 4370 */       this.viewFrustum.updateChunkPositions(viewEntity.posX, viewEntity.posZ);
/*      */     } 
/*      */     
/* 4373 */     if (Config.isDynamicLights()) {
/* 4374 */       DynamicLights.update(this);
/*      */     }
/*      */     
/* 4377 */     this.theWorld.theProfiler.endStartSection("renderlistcamera");
/* 4378 */     double d3 = viewEntity.lastTickPosX + (viewEntity.posX - viewEntity.lastTickPosX) * partialTicks;
/* 4379 */     double d4 = viewEntity.lastTickPosY + (viewEntity.posY - viewEntity.lastTickPosY) * partialTicks;
/* 4380 */     double d5 = viewEntity.lastTickPosZ + (viewEntity.posZ - viewEntity.lastTickPosZ) * partialTicks;
/* 4381 */     this.renderContainer.initialize(d3, d4, d5);
/* 4382 */     this.theWorld.theProfiler.endStartSection("cull");
/*      */     
/* 4384 */     if (this.debugFixedClippingHelper != null) {
/* 4385 */       Frustum frustum1 = new Frustum(this.debugFixedClippingHelper);
/* 4386 */       frustum1.setPosition(this.debugTerrainFrustumPosition.x, this.debugTerrainFrustumPosition.y, this.debugTerrainFrustumPosition.z);
/* 4387 */       frustum = frustum1;
/*      */     } 
/*      */     
/* 4390 */     this.mc.mcProfiler.endStartSection("culling");
/* 4391 */     BlockPos blockpos = new BlockPos(d3, d4 + viewEntity.getEyeHeight(), d5);
/* 4392 */     RenderChunk renderchunk = this.viewFrustum.getRenderChunk(blockpos);
/*      */     
/* 4394 */     this.displayListEntitiesDirty = !(!this.displayListEntitiesDirty && this.chunksToUpdate.isEmpty() && viewEntity.posX == this.lastViewEntityX && viewEntity.posY == this.lastViewEntityY && viewEntity.posZ == this.lastViewEntityZ && viewEntity.rotationPitch == this.lastViewEntityPitch && viewEntity.rotationYaw == this.lastViewEntityYaw);
/* 4395 */     this.lastViewEntityX = viewEntity.posX;
/* 4396 */     this.lastViewEntityY = viewEntity.posY;
/* 4397 */     this.lastViewEntityZ = viewEntity.posZ;
/* 4398 */     this.lastViewEntityPitch = viewEntity.rotationPitch;
/* 4399 */     this.lastViewEntityYaw = viewEntity.rotationYaw;
/* 4400 */     boolean flag = (this.debugFixedClippingHelper != null);
/* 4401 */     this.mc.mcProfiler.endStartSection("update");
/* 4402 */     Lagometer.timerVisibility.start();
/* 4403 */     int i = getCountLoadedChunks();
/*      */     
/* 4405 */     if (i != this.countLoadedChunksPrev) {
/* 4406 */       this.countLoadedChunksPrev = i;
/* 4407 */       this.displayListEntitiesDirty = true;
/*      */     } 
/*      */     
/* 4410 */     int j = 256;
/*      */     
/* 4412 */     if (!ChunkVisibility.isFinished()) {
/* 4413 */       this.displayListEntitiesDirty = true;
/*      */     }
/*      */     
/* 4416 */     if (!flag && this.displayListEntitiesDirty && Config.isIntegratedServerRunning()) {
/* 4417 */       j = ChunkVisibility.getMaxChunkY((World)this.theWorld, viewEntity, this.renderDistanceChunks);
/*      */     }
/*      */     
/* 4420 */     RenderChunk renderchunk1 = this.viewFrustum.getRenderChunk(new BlockPos(viewEntity.posX, viewEntity.posY, viewEntity.posZ));
/*      */     
/* 4422 */     if (Shaders.isShadowPass) {
/* 4423 */       this.renderInfos = this.renderInfosShadow;
/* 4424 */       this.renderInfosEntities = this.renderInfosEntitiesShadow;
/* 4425 */       this.renderInfosTileEntities = this.renderInfosTileEntitiesShadow;
/*      */       
/* 4427 */       if (!flag && this.displayListEntitiesDirty) {
/* 4428 */         clearRenderInfos();
/*      */         
/* 4430 */         if (renderchunk1 != null && renderchunk1.getPosition().getY() > j) {
/* 4431 */           this.renderInfosEntities.add(renderchunk1.getRenderInfo());
/*      */         }
/*      */         
/* 4434 */         Iterator<RenderChunk> iterator = ShadowUtils.makeShadowChunkIterator(this.theWorld, partialTicks, viewEntity, this.renderDistanceChunks, this.viewFrustum);
/*      */         
/* 4436 */         while (iterator.hasNext()) {
/* 4437 */           RenderChunk renderchunk2 = iterator.next();
/*      */           
/* 4439 */           if (renderchunk2 != null && renderchunk2.getPosition().getY() <= j) {
/* 4440 */             ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = renderchunk2.getRenderInfo();
/*      */             
/* 4442 */             if (!renderchunk2.compiledChunk.isEmpty() || renderchunk2.isNeedsUpdate()) {
/* 4443 */               this.renderInfos.add(renderglobal$containerlocalrenderinformation);
/*      */             }
/*      */             
/* 4446 */             if (ChunkUtils.hasEntities(renderchunk2.getChunk())) {
/* 4447 */               this.renderInfosEntities.add(renderglobal$containerlocalrenderinformation);
/*      */             }
/*      */             
/* 4450 */             if (renderchunk2.getCompiledChunk().getTileEntities().size() > 0) {
/* 4451 */               this.renderInfosTileEntities.add(renderglobal$containerlocalrenderinformation);
/*      */             }
/*      */           } 
/*      */         } 
/*      */       } 
/*      */     } else {
/* 4457 */       this.renderInfos = this.renderInfosNormal;
/* 4458 */       this.renderInfosEntities = this.renderInfosEntitiesNormal;
/* 4459 */       this.renderInfosTileEntities = this.renderInfosTileEntitiesNormal;
/*      */     } 
/*      */     
/* 4462 */     if (!flag && this.displayListEntitiesDirty && !Shaders.isShadowPass) {
/* 4463 */       this.displayListEntitiesDirty = false;
/* 4464 */       clearRenderInfos();
/* 4465 */       this.visibilityDeque.clear();
/* 4466 */       Deque<ContainerLocalRenderInformation> deque = this.visibilityDeque;
/* 4467 */       boolean flag1 = this.mc.renderChunksMany;
/*      */       
/* 4469 */       if (renderchunk != null && renderchunk.getPosition().getY() <= j) {
/* 4470 */         boolean flag2 = false;
/* 4471 */         ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation4 = new ContainerLocalRenderInformation(renderchunk, null, 0);
/* 4472 */         Set set1 = SET_ALL_FACINGS;
/*      */         
/* 4474 */         if (set1.size() == 1) {
/* 4475 */           Vector3f vector3f = getViewVector(viewEntity, partialTicks);
/* 4476 */           EnumFacing enumfacing2 = EnumFacing.getFacingFromVector(vector3f.x, vector3f.y, vector3f.z).getOpposite();
/* 4477 */           set1.remove(enumfacing2);
/*      */         } 
/*      */         
/* 4480 */         if (set1.isEmpty()) {
/* 4481 */           flag2 = true;
/*      */         }
/*      */         
/* 4484 */         if (flag2 && !playerSpectator) {
/* 4485 */           this.renderInfos.add(renderglobal$containerlocalrenderinformation4);
/*      */         } else {
/* 4487 */           if (playerSpectator && this.theWorld.getBlockState(blockpos).getBlock().isOpaqueCube()) {
/* 4488 */             flag1 = false;
/*      */           }
/*      */           
/* 4491 */           renderchunk.setFrameIndex(frameCount);
/* 4492 */           deque.add(renderglobal$containerlocalrenderinformation4);
/*      */         } 
/*      */       } else {
/* 4495 */         int j1 = (blockpos.getY() > 0) ? Math.min(j, 248) : 8;
/*      */         
/* 4497 */         if (renderchunk1 != null) {
/* 4498 */           this.renderInfosEntities.add(renderchunk1.getRenderInfo());
/*      */         }
/*      */         
/* 4501 */         for (int k = -this.renderDistanceChunks; k <= this.renderDistanceChunks; k++) {
/* 4502 */           for (int l = -this.renderDistanceChunks; l <= this.renderDistanceChunks; l++) {
/* 4503 */             RenderChunk renderchunk3 = this.viewFrustum.getRenderChunk(new BlockPos((k << 4) + 8, j1, (l << 4) + 8));
/*      */             
/* 4505 */             if (renderchunk3 != null && renderchunk3.isBoundingBoxInFrustum((ICamera)frustum, frameCount)) {
/* 4506 */               renderchunk3.setFrameIndex(frameCount);
/* 4507 */               ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = renderchunk3.getRenderInfo();
/* 4508 */               renderglobal$containerlocalrenderinformation1.initialize(null, 0);
/* 4509 */               deque.add(renderglobal$containerlocalrenderinformation1);
/*      */             } 
/*      */           } 
/*      */         } 
/*      */       } 
/*      */       
/* 4515 */       this.mc.mcProfiler.startSection("iteration");
/* 4516 */       boolean flag3 = Config.isFogOn();
/*      */       
/* 4518 */       while (!deque.isEmpty()) {
/* 4519 */         ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation5 = deque.poll();
/* 4520 */         RenderChunk renderchunk6 = renderglobal$containerlocalrenderinformation5.renderChunk;
/* 4521 */         EnumFacing enumfacing1 = renderglobal$containerlocalrenderinformation5.facing;
/* 4522 */         CompiledChunk compiledchunk = renderchunk6.compiledChunk;
/*      */         
/* 4524 */         if (!compiledchunk.isEmpty() || renderchunk6.isNeedsUpdate()) {
/* 4525 */           this.renderInfos.add(renderglobal$containerlocalrenderinformation5);
/*      */         }
/*      */         
/* 4528 */         if (ChunkUtils.hasEntities(renderchunk6.getChunk())) {
/* 4529 */           this.renderInfosEntities.add(renderglobal$containerlocalrenderinformation5);
/*      */         }
/*      */         
/* 4532 */         if (compiledchunk.getTileEntities().size() > 0)
/* 4533 */           this.renderInfosTileEntities.add(renderglobal$containerlocalrenderinformation5);  byte b;
/*      */         int k;
/*      */         EnumFacing[] arrayOfEnumFacing;
/* 4536 */         for (k = (arrayOfEnumFacing = flag1 ? ChunkVisibility.getFacingsNotOpposite(renderglobal$containerlocalrenderinformation5.setFacing) : EnumFacing.VALUES).length, b = 0; b < k; ) { EnumFacing enumfacing = arrayOfEnumFacing[b];
/* 4537 */           if (!flag1 || enumfacing1 == null || compiledchunk.isVisible(enumfacing1.getOpposite(), enumfacing)) {
/* 4538 */             RenderChunk renderchunk4 = getRenderChunkOffset(blockpos, renderchunk6, enumfacing, flag3, j);
/*      */             
/* 4540 */             if (renderchunk4 != null && renderchunk4.setFrameIndex(frameCount) && renderchunk4.isBoundingBoxInFrustum((ICamera)frustum, frameCount)) {
/* 4541 */               int i1 = renderglobal$containerlocalrenderinformation5.setFacing | 1 << enumfacing.ordinal();
/* 4542 */               ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation2 = renderchunk4.getRenderInfo();
/* 4543 */               renderglobal$containerlocalrenderinformation2.initialize(enumfacing, i1);
/* 4544 */               deque.add(renderglobal$containerlocalrenderinformation2);
/*      */             } 
/*      */           } 
/*      */           b++; }
/*      */       
/*      */       } 
/* 4550 */       this.mc.mcProfiler.endSection();
/*      */     } 
/*      */     
/* 4553 */     this.mc.mcProfiler.endStartSection("captureFrustum");
/*      */     
/* 4555 */     if (this.debugFixTerrainFrustum) {
/* 4556 */       fixTerrainFrustum(d3, d4, d5);
/* 4557 */       this.debugFixTerrainFrustum = false;
/*      */     } 
/*      */     
/* 4560 */     Lagometer.timerVisibility.end();
/*      */     
/* 4562 */     if (Shaders.isShadowPass) {
/* 4563 */       Shaders.mcProfilerEndSection();
/*      */     } else {
/* 4565 */       this.mc.mcProfiler.endStartSection("rebuildNear");
/* 4566 */       this.renderDispatcher.clearChunkUpdates();
/* 4567 */       Set<RenderChunk> set = this.chunksToUpdate;
/* 4568 */       this.chunksToUpdate = Sets.newLinkedHashSet();
/* 4569 */       Lagometer.timerChunkUpdate.start();
/*      */       
/* 4571 */       for (ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation3 : this.renderInfos) {
/* 4572 */         RenderChunk renderchunk5 = renderglobal$containerlocalrenderinformation3.renderChunk;
/*      */         
/* 4574 */         if (renderchunk5.isNeedsUpdate() || set.contains(renderchunk5)) {
/* 4575 */           this.displayListEntitiesDirty = true;
/* 4576 */           BlockPos blockpos1 = renderchunk5.getPosition();
/* 4577 */           boolean flag4 = (blockpos.distanceSq((blockpos1.getX() + 8), (blockpos1.getY() + 8), (blockpos1.getZ() + 8)) < 768.0D);
/*      */           
/* 4579 */           if (!flag4) {
/* 4580 */             this.chunksToUpdate.add(renderchunk5); continue;
/* 4581 */           }  if (!renderchunk5.isPlayerUpdate()) {
/* 4582 */             this.chunksToUpdateForced.add(renderchunk5); continue;
/*      */           } 
/* 4584 */           this.mc.mcProfiler.startSection("build near");
/* 4585 */           this.renderDispatcher.updateChunkNow(renderchunk5);
/* 4586 */           renderchunk5.setNeedsUpdate(false);
/* 4587 */           this.mc.mcProfiler.endSection();
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/* 4592 */       Lagometer.timerChunkUpdate.end();
/* 4593 */       this.chunksToUpdate.addAll(set);
/* 4594 */       this.mc.mcProfiler.endSection();
/*      */     } 
/*      */   }
/*      */   
/*      */   private boolean isPositionInRenderChunk(BlockPos pos, RenderChunk renderChunkIn) {
/* 4599 */     BlockPos blockpos = renderChunkIn.getPosition();
/* 4600 */     return (MathHelper.abs_int(pos.getX() - blockpos.getX()) > 16) ? false : ((MathHelper.abs_int(pos.getY() - blockpos.getY()) > 16) ? false : ((MathHelper.abs_int(pos.getZ() - blockpos.getZ()) <= 16)));
/*      */   }
/*      */   
/*      */   private Set<EnumFacing> getVisibleFacings(BlockPos pos) {
/* 4604 */     VisGraph visgraph = new VisGraph();
/* 4605 */     BlockPos blockpos = new BlockPos(pos.getX() >> 4 << 4, pos.getY() >> 4 << 4, pos.getZ() >> 4 << 4);
/* 4606 */     Chunk chunk = this.theWorld.getChunkFromBlockCoords(blockpos);
/*      */     
/* 4608 */     for (BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.getAllInBoxMutable(blockpos, blockpos.add(15, 15, 15))) {
/* 4609 */       if (chunk.getBlock((BlockPos)blockpos$mutableblockpos).isOpaqueCube()) {
/* 4610 */         visgraph.func_178606_a((BlockPos)blockpos$mutableblockpos);
/*      */       }
/*      */     } 
/* 4613 */     return visgraph.func_178609_b(pos);
/*      */   }
/*      */   
/*      */   private RenderChunk getRenderChunkOffset(BlockPos p_getRenderChunkOffset_1_, RenderChunk p_getRenderChunkOffset_2_, EnumFacing p_getRenderChunkOffset_3_, boolean p_getRenderChunkOffset_4_, int p_getRenderChunkOffset_5_) {
/* 4617 */     RenderChunk renderchunk = p_getRenderChunkOffset_2_.getRenderChunkNeighbour(p_getRenderChunkOffset_3_);
/*      */     
/* 4619 */     if (renderchunk == null)
/* 4620 */       return null; 
/* 4621 */     if (renderchunk.getPosition().getY() > p_getRenderChunkOffset_5_) {
/* 4622 */       return null;
/*      */     }
/* 4624 */     if (p_getRenderChunkOffset_4_) {
/* 4625 */       BlockPos blockpos = renderchunk.getPosition();
/* 4626 */       int i = p_getRenderChunkOffset_1_.getX() - blockpos.getX();
/* 4627 */       int j = p_getRenderChunkOffset_1_.getZ() - blockpos.getZ();
/* 4628 */       int k = i * i + j * j;
/*      */       
/* 4630 */       if (k > this.renderDistanceSq) {
/* 4631 */         return null;
/*      */       }
/*      */     } 
/*      */     
/* 4635 */     return renderchunk;
/*      */   }
/*      */ 
/*      */   
/*      */   private void fixTerrainFrustum(double x, double y, double z) {
/* 4640 */     this.debugFixedClippingHelper = (ClippingHelper)new ClippingHelperImpl();
/* 4641 */     ((ClippingHelperImpl)this.debugFixedClippingHelper).init();
/* 4642 */     Matrix4f matrix4f = new Matrix4f(this.debugFixedClippingHelper.modelviewMatrix);
/* 4643 */     matrix4f.transpose();
/* 4644 */     Matrix4f matrix4f1 = new Matrix4f(this.debugFixedClippingHelper.projectionMatrix);
/* 4645 */     matrix4f1.transpose();
/* 4646 */     Matrix4f matrix4f2 = new Matrix4f();
/* 4647 */     Matrix4f.mul((Matrix4f)matrix4f1, (Matrix4f)matrix4f, (Matrix4f)matrix4f2);
/* 4648 */     matrix4f2.invert();
/* 4649 */     this.debugTerrainFrustumPosition.x = x;
/* 4650 */     this.debugTerrainFrustumPosition.y = y;
/* 4651 */     this.debugTerrainFrustumPosition.z = z;
/* 4652 */     this.debugTerrainMatrix[0] = new Vector4f(-1.0F, -1.0F, -1.0F, 1.0F);
/* 4653 */     this.debugTerrainMatrix[1] = new Vector4f(1.0F, -1.0F, -1.0F, 1.0F);
/* 4654 */     this.debugTerrainMatrix[2] = new Vector4f(1.0F, 1.0F, -1.0F, 1.0F);
/* 4655 */     this.debugTerrainMatrix[3] = new Vector4f(-1.0F, 1.0F, -1.0F, 1.0F);
/* 4656 */     this.debugTerrainMatrix[4] = new Vector4f(-1.0F, -1.0F, 1.0F, 1.0F);
/* 4657 */     this.debugTerrainMatrix[5] = new Vector4f(1.0F, -1.0F, 1.0F, 1.0F);
/* 4658 */     this.debugTerrainMatrix[6] = new Vector4f(1.0F, 1.0F, 1.0F, 1.0F);
/* 4659 */     this.debugTerrainMatrix[7] = new Vector4f(-1.0F, 1.0F, 1.0F, 1.0F);
/*      */     
/* 4661 */     for (int i = 0; i < 8; i++) {
/* 4662 */       Matrix4f.transform((Matrix4f)matrix4f2, this.debugTerrainMatrix[i], this.debugTerrainMatrix[i]);
/* 4663 */       (this.debugTerrainMatrix[i]).x /= (this.debugTerrainMatrix[i]).w;
/* 4664 */       (this.debugTerrainMatrix[i]).y /= (this.debugTerrainMatrix[i]).w;
/* 4665 */       (this.debugTerrainMatrix[i]).z /= (this.debugTerrainMatrix[i]).w;
/* 4666 */       (this.debugTerrainMatrix[i]).w = 1.0F;
/*      */     } 
/*      */   }
/*      */   
/*      */   protected Vector3f getViewVector(Entity entityIn, double partialTicks) {
/* 4671 */     float f = (float)(entityIn.prevRotationPitch + (entityIn.rotationPitch - entityIn.prevRotationPitch) * partialTicks);
/* 4672 */     float f1 = (float)(entityIn.prevRotationYaw + (entityIn.rotationYaw - entityIn.prevRotationYaw) * partialTicks);
/*      */     
/* 4674 */     if ((Minecraft.getMinecraft()).gameSettings.showDebugInfo == 2) {
/* 4675 */       f += 180.0F;
/*      */     }
/*      */     
/* 4678 */     float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
/* 4679 */     float f3 = MathHelper.sin(-f1 * 0.017453292F - 3.1415927F);
/* 4680 */     float f4 = -MathHelper.cos(-f * 0.017453292F);
/* 4681 */     float f5 = MathHelper.sin(-f * 0.017453292F);
/* 4682 */     return new Vector3f(f3 * f4, f5, f2 * f4);
/*      */   }
/*      */   
/*      */   public int renderBlockLayer(EnumWorldBlockLayer blockLayerIn, double partialTicks, int pass, Entity entityIn) {
/* 4686 */     RenderHelper.disableStandardItemLighting();
/*      */     
/* 4688 */     if (blockLayerIn == EnumWorldBlockLayer.TRANSLUCENT && !Shaders.isShadowPass) {
/* 4689 */       this.mc.mcProfiler.startSection("translucent_sort");
/* 4690 */       double d0 = entityIn.posX - this.prevRenderSortX;
/* 4691 */       double d1 = entityIn.posY - this.prevRenderSortY;
/* 4692 */       double d2 = entityIn.posZ - this.prevRenderSortZ;
/*      */       
/* 4694 */       if (d0 * d0 + d1 * d1 + d2 * d2 > 1.0D) {
/* 4695 */         this.prevRenderSortX = entityIn.posX;
/* 4696 */         this.prevRenderSortY = entityIn.posY;
/* 4697 */         this.prevRenderSortZ = entityIn.posZ;
/* 4698 */         int k = 0;
/* 4699 */         this.chunksToResortTransparency.clear();
/*      */         
/* 4701 */         for (ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos) {
/* 4702 */           if (renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk.isLayerStarted(blockLayerIn) && k++ < 15) {
/* 4703 */             this.chunksToResortTransparency.add(renderglobal$containerlocalrenderinformation.renderChunk);
/*      */           }
/*      */         } 
/*      */       } 
/*      */       
/* 4708 */       this.mc.mcProfiler.endSection();
/*      */     } 
/*      */     
/* 4711 */     this.mc.mcProfiler.startSection("filterempty");
/* 4712 */     int l = 0;
/* 4713 */     boolean flag = (blockLayerIn == EnumWorldBlockLayer.TRANSLUCENT);
/* 4714 */     int i1 = flag ? (this.renderInfos.size() - 1) : 0;
/* 4715 */     int i = flag ? -1 : this.renderInfos.size();
/* 4716 */     int j1 = flag ? -1 : 1;
/*      */     
/* 4718 */     for (int j = i1; j != i; j += j1) {
/* 4719 */       RenderChunk renderchunk = ((ContainerLocalRenderInformation)this.renderInfos.get(j)).renderChunk;
/*      */       
/* 4721 */       if (!renderchunk.getCompiledChunk().isLayerEmpty(blockLayerIn)) {
/* 4722 */         l++;
/* 4723 */         this.renderContainer.addRenderChunk(renderchunk, blockLayerIn);
/*      */       } 
/*      */     } 
/*      */     
/* 4727 */     if (l == 0) {
/* 4728 */       this.mc.mcProfiler.endSection();
/* 4729 */       return l;
/*      */     } 
/* 4731 */     if (Config.isFogOff() && this.mc.entityRenderer.fogStandard) {
/* 4732 */       GlStateManager.disableFog();
/*      */     }
/*      */     
/* 4735 */     this.mc.mcProfiler.endStartSection("render_" + blockLayerIn);
/* 4736 */     renderBlockLayer(blockLayerIn);
/* 4737 */     this.mc.mcProfiler.endSection();
/* 4738 */     return l;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private void renderBlockLayer(EnumWorldBlockLayer blockLayerIn) {
/* 4744 */     this.mc.entityRenderer.enableLightmap();
/*      */     
/* 4746 */     if (OpenGlHelper.useVbo()) {
/* 4747 */       GL11.glEnableClientState(32884);
/* 4748 */       OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
/* 4749 */       GL11.glEnableClientState(32888);
/* 4750 */       OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
/* 4751 */       GL11.glEnableClientState(32888);
/* 4752 */       OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
/* 4753 */       GL11.glEnableClientState(32886);
/*      */     } 
/*      */     
/* 4756 */     if (Config.isShaders()) {
/* 4757 */       ShadersRender.preRenderChunkLayer(blockLayerIn);
/*      */     }
/*      */     
/* 4760 */     this.renderContainer.renderChunkLayer(blockLayerIn);
/*      */     
/* 4762 */     if (Config.isShaders()) {
/* 4763 */       ShadersRender.postRenderChunkLayer(blockLayerIn);
/*      */     }
/*      */     
/* 4766 */     if (OpenGlHelper.useVbo()) {
/* 4767 */       for (VertexFormatElement vertexformatelement : DefaultVertexFormats.BLOCK.getElements()) {
/* 4768 */         VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
/* 4769 */         int i = vertexformatelement.getIndex();
/*      */         
/* 4771 */         switch (vertexformatelement$enumusage) {
/*      */           case POSITION:
/* 4773 */             GL11.glDisableClientState(32884);
/*      */ 
/*      */           
/*      */           case UV:
/* 4777 */             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + i);
/* 4778 */             GL11.glDisableClientState(32888);
/* 4779 */             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
/*      */ 
/*      */           
/*      */           case COLOR:
/* 4783 */             GL11.glDisableClientState(32886);
/* 4784 */             GlStateManager.resetColor();
/*      */         } 
/*      */       
/*      */       } 
/*      */     }
/* 4789 */     this.mc.entityRenderer.disableLightmap();
/*      */   }
/*      */   
/*      */   private void cleanupDamagedBlocks(Iterator<DestroyBlockProgress> iteratorIn) {
/* 4793 */     while (iteratorIn.hasNext()) {
/* 4794 */       DestroyBlockProgress destroyblockprogress = iteratorIn.next();
/* 4795 */       int i = destroyblockprogress.getCreationCloudUpdateTick();
/*      */       
/* 4797 */       if (this.cloudTickCounter - i > 400) {
/* 4798 */         iteratorIn.remove();
/*      */       }
/*      */     } 
/*      */   }
/*      */   
/*      */   public void updateClouds() {
/* 4804 */     if (Config.isShaders()) {
/* 4805 */       if (Keyboard.isKeyDown(61) && Keyboard.isKeyDown(24)) {
/* 4806 */         GuiShaderOptions guishaderoptions = new GuiShaderOptions(null, Config.getGameSettings());
/* 4807 */         Config.getMinecraft().displayGuiScreen((GuiScreen)guishaderoptions);
/*      */       } 
/*      */       
/* 4810 */       if (Keyboard.isKeyDown(61) && Keyboard.isKeyDown(19)) {
/* 4811 */         Shaders.uninit();
/* 4812 */         Shaders.loadShaderPack();
/*      */       } 
/*      */     } 
/*      */     
/* 4816 */     this.cloudTickCounter++;
/*      */     
/* 4818 */     if (this.cloudTickCounter % 20 == 0) {
/* 4819 */       cleanupDamagedBlocks(this.damagedBlocks.values().iterator());
/*      */     }
/*      */   }
/*      */   
/*      */   private void renderSkyEnd() {
/* 4824 */     if (Config.isSkyEnabled()) {
/* 4825 */       GlStateManager.disableFog();
/* 4826 */       GlStateManager.disableAlpha();
/* 4827 */       GlStateManager.enableBlend();
/* 4828 */       GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
/* 4829 */       RenderHelper.disableStandardItemLighting();
/* 4830 */       GlStateManager.depthMask(false);
/* 4831 */       this.renderEngine.bindTexture(locationEndSkyPng);
/* 4832 */       Tessellator tessellator = Tessellator.getInstance();
/* 4833 */       WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/*      */       
/* 4835 */       for (int i = 0; i < 6; i++) {
/* 4836 */         GlStateManager.pushMatrix();
/*      */         
/* 4838 */         if (i == 1) {
/* 4839 */           GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
/*      */         }
/*      */         
/* 4842 */         if (i == 2) {
/* 4843 */           GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
/*      */         }
/*      */         
/* 4846 */         if (i == 3) {
/* 4847 */           GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
/*      */         }
/*      */         
/* 4850 */         if (i == 4) {
/* 4851 */           GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
/*      */         }
/*      */         
/* 4854 */         if (i == 5) {
/* 4855 */           GlStateManager.rotate(-90.0F, 0.0F, 0.0F, 1.0F);
/*      */         }
/*      */         
/* 4858 */         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
/* 4859 */         int j = 40;
/* 4860 */         int k = 40;
/* 4861 */         int l = 40;
/*      */         
/* 4863 */         if (Config.isCustomColors()) {
/* 4864 */           Vec3 vec3 = new Vec3(j / 255.0D, k / 255.0D, l / 255.0D);
/* 4865 */           vec3 = CustomColors.getWorldSkyColor(vec3, (World)this.theWorld, this.mc.getRenderViewEntity(), 0.0F);
/* 4866 */           j = (int)(vec3.xCoord * 255.0D);
/* 4867 */           k = (int)(vec3.yCoord * 255.0D);
/* 4868 */           l = (int)(vec3.zCoord * 255.0D);
/*      */         } 
/*      */         
/* 4871 */         worldrenderer.pos(-100.0D, -100.0D, -100.0D).tex(0.0D, 0.0D).color(j, k, l, 255).endVertex();
/* 4872 */         worldrenderer.pos(-100.0D, -100.0D, 100.0D).tex(0.0D, 16.0D).color(j, k, l, 255).endVertex();
/* 4873 */         worldrenderer.pos(100.0D, -100.0D, 100.0D).tex(16.0D, 16.0D).color(j, k, l, 255).endVertex();
/* 4874 */         worldrenderer.pos(100.0D, -100.0D, -100.0D).tex(16.0D, 0.0D).color(j, k, l, 255).endVertex();
/* 4875 */         tessellator.draw();
/* 4876 */         GlStateManager.popMatrix();
/*      */       } 
/*      */       
/* 4879 */       GlStateManager.depthMask(true);
/* 4880 */       GlStateManager.enableTexture2D();
/* 4881 */       GlStateManager.enableAlpha();
/* 4882 */       GlStateManager.disableBlend();
/*      */     } 
/*      */   }
/*      */   
/*      */   public void renderSky(float partialTicks, int pass) {
/* 4887 */     if (Reflector.ForgeWorldProvider_getSkyRenderer.exists()) {
/* 4888 */       WorldProvider worldprovider = this.mc.theWorld.provider;
/* 4889 */       Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getSkyRenderer, new Object[0]);
/*      */       
/* 4891 */       if (object != null) {
/* 4892 */         Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[] { Float.valueOf(partialTicks), this.theWorld, this.mc });
/*      */         
/*      */         return;
/*      */       } 
/*      */     } 
/* 4897 */     if (this.mc.theWorld.provider.getDimensionId() == 1) {
/* 4898 */       renderSkyEnd();
/* 4899 */     } else if (this.mc.theWorld.provider.isSurfaceWorld()) {
/* 4900 */       GlStateManager.disableTexture2D();
/* 4901 */       boolean flag = Config.isShaders();
/*      */       
/* 4903 */       if (flag) {
/* 4904 */         Shaders.disableTexture2D();
/*      */       }
/*      */       
/* 4907 */       Vec3 vec3 = this.theWorld.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
/* 4908 */       vec3 = CustomColors.getSkyColor(vec3, (IBlockAccess)this.mc.theWorld, (this.mc.getRenderViewEntity()).posX, (this.mc.getRenderViewEntity()).posY + 1.0D, (this.mc.getRenderViewEntity()).posZ);
/*      */       
/* 4910 */       if (flag) {
/* 4911 */         Shaders.setSkyColor(vec3);
/*      */       }
/*      */       
/* 4914 */       float f = (float)vec3.xCoord;
/* 4915 */       float f1 = (float)vec3.yCoord;
/* 4916 */       float f2 = (float)vec3.zCoord;
/*      */       
/* 4918 */       if (pass != 2) {
/* 4919 */         float f3 = (f * 30.0F + f1 * 59.0F + f2 * 11.0F) / 100.0F;
/* 4920 */         float f4 = (f * 30.0F + f1 * 70.0F) / 100.0F;
/* 4921 */         float f5 = (f * 30.0F + f2 * 70.0F) / 100.0F;
/* 4922 */         f = f3;
/* 4923 */         f1 = f4;
/* 4924 */         f2 = f5;
/*      */       } 
/*      */       
/* 4927 */       GlStateManager.color(f, f1, f2);
/* 4928 */       Tessellator tessellator = Tessellator.getInstance();
/* 4929 */       WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/* 4930 */       GlStateManager.depthMask(false);
/* 4931 */       GlStateManager.enableFog();
/*      */       
/* 4933 */       if (flag) {
/* 4934 */         Shaders.enableFog();
/*      */       }
/*      */       
/* 4937 */       GlStateManager.color(f, f1, f2);
/*      */       
/* 4939 */       if (flag) {
/* 4940 */         Shaders.preSkyList();
/*      */       }
/*      */       
/* 4943 */       if (Config.isSkyEnabled()) {
/* 4944 */         if (this.vboEnabled) {
/* 4945 */           this.skyVBO.bindBuffer();
/* 4946 */           GL11.glEnableClientState(32884);
/* 4947 */           GL11.glVertexPointer(3, 5126, 12, 0L);
/* 4948 */           this.skyVBO.drawArrays(7);
/* 4949 */           this.skyVBO.unbindBuffer();
/* 4950 */           GL11.glDisableClientState(32884);
/*      */         } else {
/* 4952 */           GlStateManager.callList(this.glSkyList);
/*      */         } 
/*      */       }
/*      */       
/* 4956 */       GlStateManager.disableFog();
/*      */       
/* 4958 */       if (flag) {
/* 4959 */         Shaders.disableFog();
/*      */       }
/*      */       
/* 4962 */       GlStateManager.disableAlpha();
/* 4963 */       GlStateManager.enableBlend();
/* 4964 */       GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
/* 4965 */       RenderHelper.disableStandardItemLighting();
/* 4966 */       float[] afloat = this.theWorld.provider.calcSunriseSunsetColors(this.theWorld.getCelestialAngle(partialTicks), partialTicks);
/*      */       
/* 4968 */       if (afloat != null && Config.isSunMoonEnabled()) {
/* 4969 */         GlStateManager.disableTexture2D();
/*      */         
/* 4971 */         if (flag) {
/* 4972 */           Shaders.disableTexture2D();
/*      */         }
/*      */         
/* 4975 */         GlStateManager.shadeModel(7425);
/* 4976 */         GlStateManager.pushMatrix();
/* 4977 */         GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
/* 4978 */         GlStateManager.rotate((MathHelper.sin(this.theWorld.getCelestialAngleRadians(partialTicks)) < 0.0F) ? 180.0F : 0.0F, 0.0F, 0.0F, 1.0F);
/* 4979 */         GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
/* 4980 */         float f6 = afloat[0];
/* 4981 */         float f7 = afloat[1];
/* 4982 */         float f8 = afloat[2];
/*      */         
/* 4984 */         if (pass != 2) {
/* 4985 */           float f9 = (f6 * 30.0F + f7 * 59.0F + f8 * 11.0F) / 100.0F;
/* 4986 */           float f10 = (f6 * 30.0F + f7 * 70.0F) / 100.0F;
/* 4987 */           float f11 = (f6 * 30.0F + f8 * 70.0F) / 100.0F;
/* 4988 */           f6 = f9;
/* 4989 */           f7 = f10;
/* 4990 */           f8 = f11;
/*      */         } 
/*      */         
/* 4993 */         worldrenderer.begin(6, DefaultVertexFormats.POSITION_COLOR);
/* 4994 */         worldrenderer.pos(0.0D, 100.0D, 0.0D).color(f6, f7, f8, afloat[3]).endVertex();
/* 4995 */         int j = 16;
/*      */         
/* 4997 */         for (int l = 0; l <= 16; l++) {
/* 4998 */           float f18 = l * 3.1415927F * 2.0F / 16.0F;
/* 4999 */           float f12 = MathHelper.sin(f18);
/* 5000 */           float f13 = MathHelper.cos(f18);
/* 5001 */           worldrenderer.pos((f12 * 120.0F), (f13 * 120.0F), (-f13 * 40.0F * afloat[3])).color(afloat[0], afloat[1], afloat[2], 0.0F).endVertex();
/*      */         } 
/*      */         
/* 5004 */         tessellator.draw();
/* 5005 */         GlStateManager.popMatrix();
/* 5006 */         GlStateManager.shadeModel(7424);
/*      */       } 
/*      */       
/* 5009 */       GlStateManager.enableTexture2D();
/*      */       
/* 5011 */       if (flag) {
/* 5012 */         Shaders.enableTexture2D();
/*      */       }
/*      */       
/* 5015 */       GlStateManager.tryBlendFuncSeparate(770, 1, 1, 0);
/* 5016 */       GlStateManager.pushMatrix();
/* 5017 */       float f15 = 1.0F - this.theWorld.getRainStrength(partialTicks);
/* 5018 */       GlStateManager.color(1.0F, 1.0F, 1.0F, f15);
/* 5019 */       GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
/* 5020 */       CustomSky.renderSky((World)this.theWorld, this.renderEngine, partialTicks);
/*      */       
/* 5022 */       if (flag) {
/* 5023 */         Shaders.preCelestialRotate();
/*      */       }
/*      */       
/* 5026 */       GlStateManager.rotate(this.theWorld.getCelestialAngle(partialTicks) * 360.0F, 1.0F, 0.0F, 0.0F);
/*      */       
/* 5028 */       if (flag) {
/* 5029 */         Shaders.postCelestialRotate();
/*      */       }
/*      */       
/* 5032 */       float f16 = 30.0F;
/*      */       
/* 5034 */       if (Config.isSunTexture()) {
/* 5035 */         this.renderEngine.bindTexture(locationSunPng);
/* 5036 */         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
/* 5037 */         worldrenderer.pos(-f16, 100.0D, -f16).tex(0.0D, 0.0D).endVertex();
/* 5038 */         worldrenderer.pos(f16, 100.0D, -f16).tex(1.0D, 0.0D).endVertex();
/* 5039 */         worldrenderer.pos(f16, 100.0D, f16).tex(1.0D, 1.0D).endVertex();
/* 5040 */         worldrenderer.pos(-f16, 100.0D, f16).tex(0.0D, 1.0D).endVertex();
/* 5041 */         tessellator.draw();
/*      */       } 
/*      */       
/* 5044 */       f16 = 20.0F;
/*      */       
/* 5046 */       if (Config.isMoonTexture()) {
/* 5047 */         this.renderEngine.bindTexture(locationMoonPhasesPng);
/* 5048 */         int i = this.theWorld.getMoonPhase();
/* 5049 */         int k = i % 4;
/* 5050 */         int i1 = i / 4 % 2;
/* 5051 */         float f19 = (k + 0) / 4.0F;
/* 5052 */         float f21 = (i1 + 0) / 2.0F;
/* 5053 */         float f23 = (k + 1) / 4.0F;
/* 5054 */         float f14 = (i1 + 1) / 2.0F;
/* 5055 */         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
/* 5056 */         worldrenderer.pos(-f16, -100.0D, f16).tex(f23, f14).endVertex();
/* 5057 */         worldrenderer.pos(f16, -100.0D, f16).tex(f19, f14).endVertex();
/* 5058 */         worldrenderer.pos(f16, -100.0D, -f16).tex(f19, f21).endVertex();
/* 5059 */         worldrenderer.pos(-f16, -100.0D, -f16).tex(f23, f21).endVertex();
/* 5060 */         tessellator.draw();
/*      */       } 
/*      */       
/* 5063 */       GlStateManager.disableTexture2D();
/*      */       
/* 5065 */       if (flag) {
/* 5066 */         Shaders.disableTexture2D();
/*      */       }
/*      */       
/* 5069 */       float f17 = this.theWorld.getStarBrightness(partialTicks) * f15;
/*      */       
/* 5071 */       if (f17 > 0.0F && Config.isStarsEnabled() && !CustomSky.hasSkyLayers((World)this.theWorld)) {
/* 5072 */         GlStateManager.color(f17, f17, f17, f17);
/*      */         
/* 5074 */         if (this.vboEnabled) {
/* 5075 */           this.starVBO.bindBuffer();
/* 5076 */           GL11.glEnableClientState(32884);
/* 5077 */           GL11.glVertexPointer(3, 5126, 12, 0L);
/* 5078 */           this.starVBO.drawArrays(7);
/* 5079 */           this.starVBO.unbindBuffer();
/* 5080 */           GL11.glDisableClientState(32884);
/*      */         } else {
/* 5082 */           GlStateManager.callList(this.starGLCallList);
/*      */         } 
/*      */       } 
/*      */       
/* 5086 */       GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
/* 5087 */       GlStateManager.disableBlend();
/* 5088 */       GlStateManager.enableAlpha();
/* 5089 */       GlStateManager.enableFog();
/*      */       
/* 5091 */       if (flag) {
/* 5092 */         Shaders.enableFog();
/*      */       }
/*      */       
/* 5095 */       GlStateManager.popMatrix();
/* 5096 */       GlStateManager.disableTexture2D();
/*      */       
/* 5098 */       if (flag) {
/* 5099 */         Shaders.disableTexture2D();
/*      */       }
/*      */       
/* 5102 */       GlStateManager.color(0.0F, 0.0F, 0.0F);
/* 5103 */       double d0 = (this.mc.thePlayer.getPositionEyes(partialTicks)).yCoord - this.theWorld.getHorizon();
/*      */       
/* 5105 */       if (d0 < 0.0D) {
/* 5106 */         GlStateManager.pushMatrix();
/* 5107 */         GlStateManager.translate(0.0F, 12.0F, 0.0F);
/*      */         
/* 5109 */         if (this.vboEnabled) {
/* 5110 */           this.sky2VBO.bindBuffer();
/* 5111 */           GL11.glEnableClientState(32884);
/* 5112 */           GL11.glVertexPointer(3, 5126, 12, 0L);
/* 5113 */           this.sky2VBO.drawArrays(7);
/* 5114 */           this.sky2VBO.unbindBuffer();
/* 5115 */           GL11.glDisableClientState(32884);
/*      */         } else {
/* 5117 */           GlStateManager.callList(this.glSkyList2);
/*      */         } 
/*      */         
/* 5120 */         GlStateManager.popMatrix();
/* 5121 */         float f20 = 1.0F;
/* 5122 */         float f22 = -((float)(d0 + 65.0D));
/* 5123 */         float f24 = -1.0F;
/* 5124 */         worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
/* 5125 */         worldrenderer.pos(-1.0D, f22, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5126 */         worldrenderer.pos(1.0D, f22, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5127 */         worldrenderer.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5128 */         worldrenderer.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5129 */         worldrenderer.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5130 */         worldrenderer.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5131 */         worldrenderer.pos(1.0D, f22, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5132 */         worldrenderer.pos(-1.0D, f22, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5133 */         worldrenderer.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5134 */         worldrenderer.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5135 */         worldrenderer.pos(1.0D, f22, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5136 */         worldrenderer.pos(1.0D, f22, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5137 */         worldrenderer.pos(-1.0D, f22, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5138 */         worldrenderer.pos(-1.0D, f22, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5139 */         worldrenderer.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5140 */         worldrenderer.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5141 */         worldrenderer.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5142 */         worldrenderer.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5143 */         worldrenderer.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
/* 5144 */         worldrenderer.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
/* 5145 */         tessellator.draw();
/*      */       } 
/*      */       
/* 5148 */       if (this.theWorld.provider.isSkyColored()) {
/* 5149 */         GlStateManager.color(f * 0.2F + 0.04F, f1 * 0.2F + 0.04F, f2 * 0.6F + 0.1F);
/*      */       } else {
/* 5151 */         GlStateManager.color(f, f1, f2);
/*      */       } 
/*      */       
/* 5154 */       if (this.mc.gameSettings.renderDistanceChunks <= 4) {
/* 5155 */         GlStateManager.color(this.mc.entityRenderer.fogColorRed, this.mc.entityRenderer.fogColorGreen, this.mc.entityRenderer.fogColorBlue);
/*      */       }
/*      */       
/* 5158 */       GlStateManager.pushMatrix();
/* 5159 */       GlStateManager.translate(0.0F, -((float)(d0 - 16.0D)), 0.0F);
/*      */       
/* 5161 */       if (Config.isSkyEnabled()) {
/* 5162 */         if (this.vboEnabled) {
/* 5163 */           this.sky2VBO.bindBuffer();
/* 5164 */           GlStateManager.glEnableClientState(32884);
/* 5165 */           GlStateManager.glVertexPointer(3, 5126, 12, 0);
/* 5166 */           this.sky2VBO.drawArrays(7);
/* 5167 */           this.sky2VBO.unbindBuffer();
/* 5168 */           GlStateManager.glDisableClientState(32884);
/*      */         } else {
/* 5170 */           GlStateManager.callList(this.glSkyList2);
/*      */         } 
/*      */       }
/*      */       
/* 5174 */       GlStateManager.popMatrix();
/* 5175 */       GlStateManager.enableTexture2D();
/*      */       
/* 5177 */       if (flag) {
/* 5178 */         Shaders.enableTexture2D();
/*      */       }
/*      */       
/* 5181 */       GlStateManager.depthMask(true);
/*      */     } 
/*      */   }
/*      */   
/*      */   public void renderClouds(float partialTicks, int pass) {
/* 5186 */     if (!Config.isCloudsOff()) {
/* 5187 */       if (Reflector.ForgeWorldProvider_getCloudRenderer.exists()) {
/* 5188 */         WorldProvider worldprovider = this.mc.theWorld.provider;
/* 5189 */         Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getCloudRenderer, new Object[0]);
/*      */         
/* 5191 */         if (object != null) {
/* 5192 */           Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[] { Float.valueOf(partialTicks), this.theWorld, this.mc });
/*      */           
/*      */           return;
/*      */         } 
/*      */       } 
/* 5197 */       if (this.mc.theWorld.provider.isSurfaceWorld()) {
/* 5198 */         if (Config.isShaders()) {
/* 5199 */           Shaders.beginClouds();
/*      */         }
/*      */         
/* 5202 */         if (Config.isCloudsFancy()) {
/* 5203 */           renderCloudsFancy(partialTicks, pass);
/*      */         } else {
/* 5205 */           float f9 = partialTicks;
/* 5206 */           partialTicks = 0.0F;
/* 5207 */           GlStateManager.disableCull();
/* 5208 */           float f10 = (float)((this.mc.getRenderViewEntity()).lastTickPosY + ((this.mc.getRenderViewEntity()).posY - (this.mc.getRenderViewEntity()).lastTickPosY) * partialTicks);
/* 5209 */           int i = 32;
/* 5210 */           int j = 8;
/* 5211 */           Tessellator tessellator = Tessellator.getInstance();
/* 5212 */           WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/* 5213 */           this.renderEngine.bindTexture(locationCloudsPng);
/* 5214 */           GlStateManager.enableBlend();
/* 5215 */           GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
/* 5216 */           Vec3 vec3 = this.theWorld.getCloudColour(partialTicks);
/* 5217 */           float f = (float)vec3.xCoord;
/* 5218 */           float f1 = (float)vec3.yCoord;
/* 5219 */           float f2 = (float)vec3.zCoord;
/* 5220 */           this.cloudRenderer.prepareToRender(false, this.cloudTickCounter, f9, vec3);
/*      */           
/* 5222 */           if (this.cloudRenderer.shouldUpdateGlList()) {
/* 5223 */             this.cloudRenderer.startUpdateGlList();
/*      */             
/* 5225 */             if (pass != 2) {
/* 5226 */               float f3 = (f * 30.0F + f1 * 59.0F + f2 * 11.0F) / 100.0F;
/* 5227 */               float f4 = (f * 30.0F + f1 * 70.0F) / 100.0F;
/* 5228 */               float f5 = (f * 30.0F + f2 * 70.0F) / 100.0F;
/* 5229 */               f = f3;
/* 5230 */               f1 = f4;
/* 5231 */               f2 = f5;
/*      */             } 
/*      */             
/* 5234 */             float f11 = 4.8828125E-4F;
/* 5235 */             double d2 = (this.cloudTickCounter + partialTicks);
/* 5236 */             double d0 = (this.mc.getRenderViewEntity()).prevPosX + ((this.mc.getRenderViewEntity()).posX - (this.mc.getRenderViewEntity()).prevPosX) * partialTicks + d2 * 0.029999999329447746D;
/* 5237 */             double d1 = (this.mc.getRenderViewEntity()).prevPosZ + ((this.mc.getRenderViewEntity()).posZ - (this.mc.getRenderViewEntity()).prevPosZ) * partialTicks;
/* 5238 */             int k = MathHelper.floor_double(d0 / 2048.0D);
/* 5239 */             int l = MathHelper.floor_double(d1 / 2048.0D);
/* 5240 */             d0 -= (k * 2048);
/* 5241 */             d1 -= (l * 2048);
/* 5242 */             float f6 = this.theWorld.provider.getCloudHeight() - f10 + 0.33F;
/* 5243 */             f6 += this.mc.gameSettings.ofCloudsHeight * 128.0F;
/* 5244 */             float f7 = (float)(d0 * 4.8828125E-4D);
/* 5245 */             float f8 = (float)(d1 * 4.8828125E-4D);
/* 5246 */             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
/*      */             
/* 5248 */             for (int i1 = -256; i1 < 256; i1 += 32) {
/* 5249 */               for (int j1 = -256; j1 < 256; j1 += 32) {
/* 5250 */                 worldrenderer.pos((i1 + 0), f6, (j1 + 32)).tex(((i1 + 0) * 4.8828125E-4F + f7), ((j1 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
/* 5251 */                 worldrenderer.pos((i1 + 32), f6, (j1 + 32)).tex(((i1 + 32) * 4.8828125E-4F + f7), ((j1 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
/* 5252 */                 worldrenderer.pos((i1 + 32), f6, (j1 + 0)).tex(((i1 + 32) * 4.8828125E-4F + f7), ((j1 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
/* 5253 */                 worldrenderer.pos((i1 + 0), f6, (j1 + 0)).tex(((i1 + 0) * 4.8828125E-4F + f7), ((j1 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
/*      */               } 
/*      */             } 
/*      */             
/* 5257 */             tessellator.draw();
/* 5258 */             this.cloudRenderer.endUpdateGlList();
/*      */           } 
/*      */           
/* 5261 */           this.cloudRenderer.renderGlList();
/* 5262 */           GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
/* 5263 */           GlStateManager.disableBlend();
/* 5264 */           GlStateManager.enableCull();
/*      */         } 
/*      */         
/* 5267 */         if (Config.isShaders()) {
/* 5268 */           Shaders.endClouds();
/*      */         }
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean hasCloudFog(double x, double y, double z, float partialTicks) {
/* 5278 */     return false;
/*      */   }
/*      */   
/*      */   private void renderCloudsFancy(float partialTicks, int pass) {
/* 5282 */     partialTicks = 0.0F;
/* 5283 */     GlStateManager.disableCull();
/* 5284 */     float f = (float)((this.mc.getRenderViewEntity()).lastTickPosY + ((this.mc.getRenderViewEntity()).posY - (this.mc.getRenderViewEntity()).lastTickPosY) * partialTicks);
/* 5285 */     Tessellator tessellator = Tessellator.getInstance();
/* 5286 */     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/* 5287 */     float f1 = 12.0F;
/* 5288 */     float f2 = 4.0F;
/* 5289 */     double d0 = (this.cloudTickCounter + partialTicks);
/* 5290 */     double d1 = ((this.mc.getRenderViewEntity()).prevPosX + ((this.mc.getRenderViewEntity()).posX - (this.mc.getRenderViewEntity()).prevPosX) * partialTicks + d0 * 0.029999999329447746D) / 12.0D;
/* 5291 */     double d2 = ((this.mc.getRenderViewEntity()).prevPosZ + ((this.mc.getRenderViewEntity()).posZ - (this.mc.getRenderViewEntity()).prevPosZ) * partialTicks) / 12.0D + 0.33000001311302185D;
/* 5292 */     float f3 = this.theWorld.provider.getCloudHeight() - f + 0.33F;
/* 5293 */     f3 += this.mc.gameSettings.ofCloudsHeight * 128.0F;
/* 5294 */     int i = MathHelper.floor_double(d1 / 2048.0D);
/* 5295 */     int j = MathHelper.floor_double(d2 / 2048.0D);
/* 5296 */     d1 -= (i * 2048);
/* 5297 */     d2 -= (j * 2048);
/* 5298 */     this.renderEngine.bindTexture(locationCloudsPng);
/* 5299 */     GlStateManager.enableBlend();
/* 5300 */     GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
/* 5301 */     Vec3 vec3 = this.theWorld.getCloudColour(partialTicks);
/* 5302 */     float f4 = (float)vec3.xCoord;
/* 5303 */     float f5 = (float)vec3.yCoord;
/* 5304 */     float f6 = (float)vec3.zCoord;
/* 5305 */     this.cloudRenderer.prepareToRender(true, this.cloudTickCounter, partialTicks, vec3);
/*      */     
/* 5307 */     if (pass != 2) {
/* 5308 */       float f7 = (f4 * 30.0F + f5 * 59.0F + f6 * 11.0F) / 100.0F;
/* 5309 */       float f8 = (f4 * 30.0F + f5 * 70.0F) / 100.0F;
/* 5310 */       float f9 = (f4 * 30.0F + f6 * 70.0F) / 100.0F;
/* 5311 */       f4 = f7;
/* 5312 */       f5 = f8;
/* 5313 */       f6 = f9;
/*      */     } 
/*      */     
/* 5316 */     float f26 = f4 * 0.9F;
/* 5317 */     float f27 = f5 * 0.9F;
/* 5318 */     float f28 = f6 * 0.9F;
/* 5319 */     float f10 = f4 * 0.7F;
/* 5320 */     float f11 = f5 * 0.7F;
/* 5321 */     float f12 = f6 * 0.7F;
/* 5322 */     float f13 = f4 * 0.8F;
/* 5323 */     float f14 = f5 * 0.8F;
/* 5324 */     float f15 = f6 * 0.8F;
/* 5325 */     float f16 = 0.00390625F;
/* 5326 */     float f17 = MathHelper.floor_double(d1) * 0.00390625F;
/* 5327 */     float f18 = MathHelper.floor_double(d2) * 0.00390625F;
/* 5328 */     float f19 = (float)(d1 - MathHelper.floor_double(d1));
/* 5329 */     float f20 = (float)(d2 - MathHelper.floor_double(d2));
/* 5330 */     int k = 8;
/* 5331 */     int l = 4;
/* 5332 */     float f21 = 9.765625E-4F;
/* 5333 */     GlStateManager.scale(12.0F, 1.0F, 12.0F);
/*      */     
/* 5335 */     for (int i1 = 0; i1 < 2; i1++) {
/* 5336 */       if (i1 == 0) {
/* 5337 */         GlStateManager.colorMask(false, false, false, false);
/*      */       } else {
/* 5339 */         switch (pass) {
/*      */           case 0:
/* 5341 */             GlStateManager.colorMask(false, true, true, true);
/*      */             break;
/*      */           
/*      */           case 1:
/* 5345 */             GlStateManager.colorMask(true, false, false, true);
/*      */             break;
/*      */           
/*      */           case 2:
/* 5349 */             GlStateManager.colorMask(true, true, true, true);
/*      */             break;
/*      */         } 
/*      */       } 
/* 5353 */       this.cloudRenderer.renderGlList();
/*      */     } 
/*      */     
/* 5356 */     if (this.cloudRenderer.shouldUpdateGlList()) {
/* 5357 */       this.cloudRenderer.startUpdateGlList();
/*      */       
/* 5359 */       for (int l1 = -3; l1 <= 4; l1++) {
/* 5360 */         for (int j1 = -3; j1 <= 4; j1++) {
/* 5361 */           worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
/* 5362 */           float f22 = (l1 * 8);
/* 5363 */           float f23 = (j1 * 8);
/* 5364 */           float f24 = f22 - f19;
/* 5365 */           float f25 = f23 - f20;
/*      */           
/* 5367 */           if (f3 > -5.0F) {
/* 5368 */             worldrenderer.pos((f24 + 0.0F), (f3 + 0.0F), (f25 + 8.0F)).tex(((f22 + 0.0F) * 0.00390625F + f17), ((f23 + 8.0F) * 0.00390625F + f18)).color(f10, f11, f12, 0.8F).normal(0.0F, -1.0F, 0.0F).endVertex();
/* 5369 */             worldrenderer.pos((f24 + 8.0F), (f3 + 0.0F), (f25 + 8.0F)).tex(((f22 + 8.0F) * 0.00390625F + f17), ((f23 + 8.0F) * 0.00390625F + f18)).color(f10, f11, f12, 0.8F).normal(0.0F, -1.0F, 0.0F).endVertex();
/* 5370 */             worldrenderer.pos((f24 + 8.0F), (f3 + 0.0F), (f25 + 0.0F)).tex(((f22 + 8.0F) * 0.00390625F + f17), ((f23 + 0.0F) * 0.00390625F + f18)).color(f10, f11, f12, 0.8F).normal(0.0F, -1.0F, 0.0F).endVertex();
/* 5371 */             worldrenderer.pos((f24 + 0.0F), (f3 + 0.0F), (f25 + 0.0F)).tex(((f22 + 0.0F) * 0.00390625F + f17), ((f23 + 0.0F) * 0.00390625F + f18)).color(f10, f11, f12, 0.8F).normal(0.0F, -1.0F, 0.0F).endVertex();
/*      */           } 
/*      */           
/* 5374 */           if (f3 <= 5.0F) {
/* 5375 */             worldrenderer.pos((f24 + 0.0F), (f3 + 4.0F - 9.765625E-4F), (f25 + 8.0F)).tex(((f22 + 0.0F) * 0.00390625F + f17), ((f23 + 8.0F) * 0.00390625F + f18)).color(f4, f5, f6, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
/* 5376 */             worldrenderer.pos((f24 + 8.0F), (f3 + 4.0F - 9.765625E-4F), (f25 + 8.0F)).tex(((f22 + 8.0F) * 0.00390625F + f17), ((f23 + 8.0F) * 0.00390625F + f18)).color(f4, f5, f6, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
/* 5377 */             worldrenderer.pos((f24 + 8.0F), (f3 + 4.0F - 9.765625E-4F), (f25 + 0.0F)).tex(((f22 + 8.0F) * 0.00390625F + f17), ((f23 + 0.0F) * 0.00390625F + f18)).color(f4, f5, f6, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
/* 5378 */             worldrenderer.pos((f24 + 0.0F), (f3 + 4.0F - 9.765625E-4F), (f25 + 0.0F)).tex(((f22 + 0.0F) * 0.00390625F + f17), ((f23 + 0.0F) * 0.00390625F + f18)).color(f4, f5, f6, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
/*      */           } 
/*      */           
/* 5381 */           if (l1 > -1) {
/* 5382 */             for (int k1 = 0; k1 < 8; k1++) {
/* 5383 */               worldrenderer.pos((f24 + k1 + 0.0F), (f3 + 0.0F), (f25 + 8.0F)).tex(((f22 + k1 + 0.5F) * 0.00390625F + f17), ((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
/* 5384 */               worldrenderer.pos((f24 + k1 + 0.0F), (f3 + 4.0F), (f25 + 8.0F)).tex(((f22 + k1 + 0.5F) * 0.00390625F + f17), ((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
/* 5385 */               worldrenderer.pos((f24 + k1 + 0.0F), (f3 + 4.0F), (f25 + 0.0F)).tex(((f22 + k1 + 0.5F) * 0.00390625F + f17), ((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
/* 5386 */               worldrenderer.pos((f24 + k1 + 0.0F), (f3 + 0.0F), (f25 + 0.0F)).tex(((f22 + k1 + 0.5F) * 0.00390625F + f17), ((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
/*      */             } 
/*      */           }
/*      */           
/* 5390 */           if (l1 <= 1) {
/* 5391 */             for (int i2 = 0; i2 < 8; i2++) {
/* 5392 */               worldrenderer.pos((f24 + i2 + 1.0F - 9.765625E-4F), (f3 + 0.0F), (f25 + 8.0F)).tex(((f22 + i2 + 0.5F) * 0.00390625F + f17), ((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
/* 5393 */               worldrenderer.pos((f24 + i2 + 1.0F - 9.765625E-4F), (f3 + 4.0F), (f25 + 8.0F)).tex(((f22 + i2 + 0.5F) * 0.00390625F + f17), ((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
/* 5394 */               worldrenderer.pos((f24 + i2 + 1.0F - 9.765625E-4F), (f3 + 4.0F), (f25 + 0.0F)).tex(((f22 + i2 + 0.5F) * 0.00390625F + f17), ((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
/* 5395 */               worldrenderer.pos((f24 + i2 + 1.0F - 9.765625E-4F), (f3 + 0.0F), (f25 + 0.0F)).tex(((f22 + i2 + 0.5F) * 0.00390625F + f17), ((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
/*      */             } 
/*      */           }
/*      */           
/* 5399 */           if (j1 > -1) {
/* 5400 */             for (int j2 = 0; j2 < 8; j2++) {
/* 5401 */               worldrenderer.pos((f24 + 0.0F), (f3 + 4.0F), (f25 + j2 + 0.0F)).tex(((f22 + 0.0F) * 0.00390625F + f17), ((f23 + j2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
/* 5402 */               worldrenderer.pos((f24 + 8.0F), (f3 + 4.0F), (f25 + j2 + 0.0F)).tex(((f22 + 8.0F) * 0.00390625F + f17), ((f23 + j2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
/* 5403 */               worldrenderer.pos((f24 + 8.0F), (f3 + 0.0F), (f25 + j2 + 0.0F)).tex(((f22 + 8.0F) * 0.00390625F + f17), ((f23 + j2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
/* 5404 */               worldrenderer.pos((f24 + 0.0F), (f3 + 0.0F), (f25 + j2 + 0.0F)).tex(((f22 + 0.0F) * 0.00390625F + f17), ((f23 + j2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
/*      */             } 
/*      */           }
/*      */           
/* 5408 */           if (j1 <= 1) {
/* 5409 */             for (int k2 = 0; k2 < 8; k2++) {
/* 5410 */               worldrenderer.pos((f24 + 0.0F), (f3 + 4.0F), (f25 + k2 + 1.0F - 9.765625E-4F)).tex(((f22 + 0.0F) * 0.00390625F + f17), ((f23 + k2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
/* 5411 */               worldrenderer.pos((f24 + 8.0F), (f3 + 4.0F), (f25 + k2 + 1.0F - 9.765625E-4F)).tex(((f22 + 8.0F) * 0.00390625F + f17), ((f23 + k2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
/* 5412 */               worldrenderer.pos((f24 + 8.0F), (f3 + 0.0F), (f25 + k2 + 1.0F - 9.765625E-4F)).tex(((f22 + 8.0F) * 0.00390625F + f17), ((f23 + k2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
/* 5413 */               worldrenderer.pos((f24 + 0.0F), (f3 + 0.0F), (f25 + k2 + 1.0F - 9.765625E-4F)).tex(((f22 + 0.0F) * 0.00390625F + f17), ((f23 + k2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
/*      */             } 
/*      */           }
/*      */           
/* 5417 */           tessellator.draw();
/*      */         } 
/*      */       } 
/*      */       
/* 5421 */       this.cloudRenderer.endUpdateGlList();
/*      */     } 
/*      */     
/* 5424 */     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
/* 5425 */     GlStateManager.disableBlend();
/* 5426 */     GlStateManager.enableCull();
/*      */   }
/*      */   
/*      */   public void updateChunks(long finishTimeNano) {
/* 5430 */     finishTimeNano = (long)(finishTimeNano + 1.0E8D);
/* 5431 */     this.displayListEntitiesDirty |= this.renderDispatcher.runChunkUploads(finishTimeNano);
/*      */     
/* 5433 */     if (this.chunksToUpdateForced.size() > 0) {
/* 5434 */       Iterator<RenderChunk> iterator = this.chunksToUpdateForced.iterator();
/*      */       
/* 5436 */       while (iterator.hasNext()) {
/* 5437 */         RenderChunk renderchunk = iterator.next();
/*      */         
/* 5439 */         if (!this.renderDispatcher.updateChunkLater(renderchunk)) {
/*      */           break;
/*      */         }
/*      */         
/* 5443 */         renderchunk.setNeedsUpdate(false);
/* 5444 */         iterator.remove();
/* 5445 */         this.chunksToUpdate.remove(renderchunk);
/* 5446 */         this.chunksToResortTransparency.remove(renderchunk);
/*      */       } 
/*      */     } 
/*      */     
/* 5450 */     if (this.chunksToResortTransparency.size() > 0) {
/* 5451 */       Iterator<RenderChunk> iterator2 = this.chunksToResortTransparency.iterator();
/*      */       
/* 5453 */       if (iterator2.hasNext()) {
/* 5454 */         RenderChunk renderchunk2 = iterator2.next();
/*      */         
/* 5456 */         if (this.renderDispatcher.updateTransparencyLater(renderchunk2)) {
/* 5457 */           iterator2.remove();
/*      */         }
/*      */       } 
/*      */     } 
/*      */     
/* 5462 */     double d1 = 0.0D;
/* 5463 */     int i = Config.getUpdatesPerFrame();
/*      */     
/* 5465 */     if (!this.chunksToUpdate.isEmpty()) {
/* 5466 */       Iterator<RenderChunk> iterator1 = this.chunksToUpdate.iterator();
/*      */       
/* 5468 */       while (iterator1.hasNext()) {
/* 5469 */         boolean flag1; RenderChunk renderchunk1 = iterator1.next();
/* 5470 */         boolean flag = renderchunk1.isChunkRegionEmpty();
/*      */ 
/*      */         
/* 5473 */         if (flag) {
/* 5474 */           flag1 = this.renderDispatcher.updateChunkNow(renderchunk1);
/*      */         } else {
/* 5476 */           flag1 = this.renderDispatcher.updateChunkLater(renderchunk1);
/*      */         } 
/*      */         
/* 5479 */         if (!flag1) {
/*      */           break;
/*      */         }
/*      */         
/* 5483 */         renderchunk1.setNeedsUpdate(false);
/* 5484 */         iterator1.remove();
/*      */         
/* 5486 */         if (!flag) {
/* 5487 */           double d0 = 2.0D * RenderChunkUtils.getRelativeBufferSize(renderchunk1);
/* 5488 */           d1 += d0;
/*      */           
/* 5490 */           if (d1 > i) {
/*      */             break;
/*      */           }
/*      */         } 
/*      */       } 
/*      */     } 
/*      */   }
/*      */   
/*      */   public void renderWorldBorder(Entity entityIn, float partialTicks) {
/* 5499 */     Tessellator tessellator = Tessellator.getInstance();
/* 5500 */     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/* 5501 */     WorldBorder worldborder = this.theWorld.getWorldBorder();
/* 5502 */     double d0 = (this.mc.gameSettings.renderDistanceChunks * 16);
/*      */     
/* 5504 */     if (entityIn.posX >= worldborder.maxX() - d0 || entityIn.posX <= worldborder.minX() + d0 || entityIn.posZ >= worldborder.maxZ() - d0 || entityIn.posZ <= worldborder.minZ() + d0) {
/* 5505 */       if (Config.isShaders()) {
/* 5506 */         Shaders.pushProgram();
/* 5507 */         Shaders.useProgram(Shaders.ProgramTexturedLit);
/*      */       } 
/*      */       
/* 5510 */       double d1 = 1.0D - worldborder.getClosestDistance(entityIn) / d0;
/* 5511 */       d1 = Math.pow(d1, 4.0D);
/* 5512 */       double d2 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * partialTicks;
/* 5513 */       double d3 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * partialTicks;
/* 5514 */       double d4 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * partialTicks;
/* 5515 */       GlStateManager.enableBlend();
/* 5516 */       GlStateManager.tryBlendFuncSeparate(770, 1, 1, 0);
/* 5517 */       this.renderEngine.bindTexture(locationForcefieldPng);
/* 5518 */       GlStateManager.depthMask(false);
/* 5519 */       GlStateManager.pushMatrix();
/* 5520 */       int i = worldborder.getStatus().getID();
/* 5521 */       float f = (i >> 16 & 0xFF) / 255.0F;
/* 5522 */       float f1 = (i >> 8 & 0xFF) / 255.0F;
/* 5523 */       float f2 = (i & 0xFF) / 255.0F;
/* 5524 */       GlStateManager.color(f, f1, f2, (float)d1);
/* 5525 */       GlStateManager.doPolygonOffset(-3.0F, -3.0F);
/* 5526 */       GlStateManager.enablePolygonOffset();
/* 5527 */       GlStateManager.alphaFunc(516, 0.1F);
/* 5528 */       GlStateManager.enableAlpha();
/* 5529 */       GlStateManager.disableCull();
/* 5530 */       float f3 = (float)(Minecraft.getSystemTime() % 3000L) / 3000.0F;
/* 5531 */       float f4 = 0.0F;
/* 5532 */       float f5 = 0.0F;
/* 5533 */       float f6 = 128.0F;
/* 5534 */       worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
/* 5535 */       worldrenderer.setTranslation(-d2, -d3, -d4);
/* 5536 */       double d5 = Math.max(MathHelper.floor_double(d4 - d0), worldborder.minZ());
/* 5537 */       double d6 = Math.min(MathHelper.ceiling_double_int(d4 + d0), worldborder.maxZ());
/*      */       
/* 5539 */       if (d2 > worldborder.maxX() - d0) {
/* 5540 */         float f7 = 0.0F;
/*      */         
/* 5542 */         for (double d7 = d5; d7 < d6; f7 += 0.5F) {
/* 5543 */           double d8 = Math.min(1.0D, d6 - d7);
/* 5544 */           float f8 = (float)d8 * 0.5F;
/* 5545 */           worldrenderer.pos(worldborder.maxX(), 256.0D, d7).tex((f3 + f7), (f3 + 0.0F)).endVertex();
/* 5546 */           worldrenderer.pos(worldborder.maxX(), 256.0D, d7 + d8).tex((f3 + f8 + f7), (f3 + 0.0F)).endVertex();
/* 5547 */           worldrenderer.pos(worldborder.maxX(), 0.0D, d7 + d8).tex((f3 + f8 + f7), (f3 + 128.0F)).endVertex();
/* 5548 */           worldrenderer.pos(worldborder.maxX(), 0.0D, d7).tex((f3 + f7), (f3 + 128.0F)).endVertex();
/* 5549 */           d7++;
/*      */         } 
/*      */       } 
/*      */       
/* 5553 */       if (d2 < worldborder.minX() + d0) {
/* 5554 */         float f9 = 0.0F;
/*      */         
/* 5556 */         for (double d9 = d5; d9 < d6; f9 += 0.5F) {
/* 5557 */           double d12 = Math.min(1.0D, d6 - d9);
/* 5558 */           float f12 = (float)d12 * 0.5F;
/* 5559 */           worldrenderer.pos(worldborder.minX(), 256.0D, d9).tex((f3 + f9), (f3 + 0.0F)).endVertex();
/* 5560 */           worldrenderer.pos(worldborder.minX(), 256.0D, d9 + d12).tex((f3 + f12 + f9), (f3 + 0.0F)).endVertex();
/* 5561 */           worldrenderer.pos(worldborder.minX(), 0.0D, d9 + d12).tex((f3 + f12 + f9), (f3 + 128.0F)).endVertex();
/* 5562 */           worldrenderer.pos(worldborder.minX(), 0.0D, d9).tex((f3 + f9), (f3 + 128.0F)).endVertex();
/* 5563 */           d9++;
/*      */         } 
/*      */       } 
/*      */       
/* 5567 */       d5 = Math.max(MathHelper.floor_double(d2 - d0), worldborder.minX());
/* 5568 */       d6 = Math.min(MathHelper.ceiling_double_int(d2 + d0), worldborder.maxX());
/*      */       
/* 5570 */       if (d4 > worldborder.maxZ() - d0) {
/* 5571 */         float f10 = 0.0F;
/*      */         
/* 5573 */         for (double d10 = d5; d10 < d6; f10 += 0.5F) {
/* 5574 */           double d13 = Math.min(1.0D, d6 - d10);
/* 5575 */           float f13 = (float)d13 * 0.5F;
/* 5576 */           worldrenderer.pos(d10, 256.0D, worldborder.maxZ()).tex((f3 + f10), (f3 + 0.0F)).endVertex();
/* 5577 */           worldrenderer.pos(d10 + d13, 256.0D, worldborder.maxZ()).tex((f3 + f13 + f10), (f3 + 0.0F)).endVertex();
/* 5578 */           worldrenderer.pos(d10 + d13, 0.0D, worldborder.maxZ()).tex((f3 + f13 + f10), (f3 + 128.0F)).endVertex();
/* 5579 */           worldrenderer.pos(d10, 0.0D, worldborder.maxZ()).tex((f3 + f10), (f3 + 128.0F)).endVertex();
/* 5580 */           d10++;
/*      */         } 
/*      */       } 
/*      */       
/* 5584 */       if (d4 < worldborder.minZ() + d0) {
/* 5585 */         float f11 = 0.0F;
/*      */         
/* 5587 */         for (double d11 = d5; d11 < d6; f11 += 0.5F) {
/* 5588 */           double d14 = Math.min(1.0D, d6 - d11);
/* 5589 */           float f14 = (float)d14 * 0.5F;
/* 5590 */           worldrenderer.pos(d11, 256.0D, worldborder.minZ()).tex((f3 + f11), (f3 + 0.0F)).endVertex();
/* 5591 */           worldrenderer.pos(d11 + d14, 256.0D, worldborder.minZ()).tex((f3 + f14 + f11), (f3 + 0.0F)).endVertex();
/* 5592 */           worldrenderer.pos(d11 + d14, 0.0D, worldborder.minZ()).tex((f3 + f14 + f11), (f3 + 128.0F)).endVertex();
/* 5593 */           worldrenderer.pos(d11, 0.0D, worldborder.minZ()).tex((f3 + f11), (f3 + 128.0F)).endVertex();
/* 5594 */           d11++;
/*      */         } 
/*      */       } 
/*      */       
/* 5598 */       tessellator.draw();
/* 5599 */       worldrenderer.setTranslation(0.0D, 0.0D, 0.0D);
/* 5600 */       GlStateManager.enableCull();
/* 5601 */       GlStateManager.disableAlpha();
/* 5602 */       GlStateManager.doPolygonOffset(0.0F, 0.0F);
/* 5603 */       GlStateManager.disablePolygonOffset();
/* 5604 */       GlStateManager.enableAlpha();
/* 5605 */       GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
/* 5606 */       GlStateManager.disableBlend();
/* 5607 */       GlStateManager.popMatrix();
/* 5608 */       GlStateManager.depthMask(true);
/*      */       
/* 5610 */       if (Config.isShaders()) {
/* 5611 */         Shaders.popProgram();
/*      */       }
/*      */     } 
/*      */   }
/*      */   
/*      */   private void preRenderDamagedBlocks() {
/* 5617 */     GlStateManager.tryBlendFuncSeparate(774, 768, 1, 0);
/* 5618 */     GlStateManager.enableBlend();
/* 5619 */     GlStateManager.color(1.0F, 1.0F, 1.0F, 0.5F);
/* 5620 */     GlStateManager.doPolygonOffset(-1.0F, -10.0F);
/* 5621 */     GlStateManager.enablePolygonOffset();
/* 5622 */     GlStateManager.alphaFunc(516, 0.1F);
/* 5623 */     GlStateManager.enableAlpha();
/* 5624 */     GlStateManager.pushMatrix();
/*      */     
/* 5626 */     if (Config.isShaders()) {
/* 5627 */       ShadersRender.beginBlockDamage();
/*      */     }
/*      */   }
/*      */   
/*      */   private void postRenderDamagedBlocks() {
/* 5632 */     GlStateManager.disableAlpha();
/* 5633 */     GlStateManager.doPolygonOffset(0.0F, 0.0F);
/* 5634 */     GlStateManager.disablePolygonOffset();
/* 5635 */     GlStateManager.enableAlpha();
/* 5636 */     GlStateManager.depthMask(true);
/* 5637 */     GlStateManager.popMatrix();
/*      */     
/* 5639 */     if (Config.isShaders()) {
/* 5640 */       ShadersRender.endBlockDamage();
/*      */     }
/*      */   }
/*      */   
/*      */   public void drawBlockDamageTexture(Tessellator tessellatorIn, WorldRenderer worldRendererIn, Entity entityIn, float partialTicks) {
/* 5645 */     double d0 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * partialTicks;
/* 5646 */     double d1 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * partialTicks;
/* 5647 */     double d2 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * partialTicks;
/*      */     
/* 5649 */     if (!this.damagedBlocks.isEmpty()) {
/* 5650 */       this.renderEngine.bindTexture(TextureMap.locationBlocksTexture);
/* 5651 */       preRenderDamagedBlocks();
/* 5652 */       worldRendererIn.begin(7, DefaultVertexFormats.BLOCK);
/* 5653 */       worldRendererIn.setTranslation(-d0, -d1, -d2);
/* 5654 */       worldRendererIn.noColor();
/* 5655 */       Iterator<DestroyBlockProgress> iterator = this.damagedBlocks.values().iterator();
/*      */       
/* 5657 */       while (iterator.hasNext()) {
/* 5658 */         boolean flag; DestroyBlockProgress destroyblockprogress = iterator.next();
/* 5659 */         BlockPos blockpos = destroyblockprogress.getPosition();
/* 5660 */         double d3 = blockpos.getX() - d0;
/* 5661 */         double d4 = blockpos.getY() - d1;
/* 5662 */         double d5 = blockpos.getZ() - d2;
/* 5663 */         Block block = this.theWorld.getBlockState(blockpos).getBlock();
/*      */ 
/*      */         
/* 5666 */         if (Reflector.ForgeTileEntity_canRenderBreaking.exists()) {
/* 5667 */           boolean flag1 = !(!(block instanceof net.minecraft.block.BlockChest) && !(block instanceof net.minecraft.block.BlockEnderChest) && !(block instanceof net.minecraft.block.BlockSign) && !(block instanceof net.minecraft.block.BlockSkull));
/*      */           
/* 5669 */           if (!flag1) {
/* 5670 */             TileEntity tileentity = this.theWorld.getTileEntity(blockpos);
/*      */             
/* 5672 */             if (tileentity != null) {
/* 5673 */               flag1 = Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_canRenderBreaking, new Object[0]);
/*      */             }
/*      */           } 
/*      */           
/* 5677 */           flag = !flag1;
/*      */         } else {
/* 5679 */           flag = (!(block instanceof net.minecraft.block.BlockChest) && !(block instanceof net.minecraft.block.BlockEnderChest) && !(block instanceof net.minecraft.block.BlockSign) && !(block instanceof net.minecraft.block.BlockSkull));
/*      */         } 
/*      */         
/* 5682 */         if (flag) {
/* 5683 */           if (d3 * d3 + d4 * d4 + d5 * d5 > 1024.0D) {
/* 5684 */             iterator.remove(); continue;
/*      */           } 
/* 5686 */           IBlockState iblockstate = this.theWorld.getBlockState(blockpos);
/*      */           
/* 5688 */           if (iblockstate.getBlock().getMaterial() != Material.air) {
/* 5689 */             int i = destroyblockprogress.getPartialBlockDamage();
/* 5690 */             TextureAtlasSprite textureatlassprite = this.destroyBlockIcons[i];
/* 5691 */             BlockRendererDispatcher blockrendererdispatcher = this.mc.getBlockRendererDispatcher();
/* 5692 */             blockrendererdispatcher.renderBlockDamage(iblockstate, blockpos, textureatlassprite, (IBlockAccess)this.theWorld);
/*      */           } 
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/* 5698 */       tessellatorIn.draw();
/* 5699 */       worldRendererIn.setTranslation(0.0D, 0.0D, 0.0D);
/* 5700 */       postRenderDamagedBlocks();
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void drawSelectionBox(EntityPlayer player, MovingObjectPosition movingObjectPositionIn, int execute, float partialTicks) {
/* 5710 */     if (execute == 0 && movingObjectPositionIn.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
/* 5711 */       GlStateManager.enableBlend();
/* 5712 */       GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
/* 5713 */       if (!(Client.getInstance()).hudManager.blockoutline.isEnabled()) {
/* 5714 */         GlStateManager.color(0.0F, 0.0F, 0.0F, 0.4F);
/* 5715 */         GL11.glLineWidth(2.0F);
/*      */       } else {
/* 5717 */         GlStateManager.color((Client.getInstance()).blockOutLineRed, (Client.getInstance()).blockOutLineGreen, (Client.getInstance()).blockOutLineBlue);
/* 5718 */         GL11.glLineWidth(2.3F);
/*      */       } 
/* 5720 */       GlStateManager.disableTexture2D();
/*      */       
/* 5722 */       if (Config.isShaders()) {
/* 5723 */         Shaders.disableTexture2D();
/*      */       }
/*      */       
/* 5726 */       GlStateManager.depthMask(false);
/* 5727 */       float f = 0.002F;
/* 5728 */       BlockPos blockpos = movingObjectPositionIn.getBlockPos();
/* 5729 */       Block block = this.theWorld.getBlockState(blockpos).getBlock();
/*      */       
/* 5731 */       if (block.getMaterial() != Material.air && this.theWorld.getWorldBorder().contains(blockpos)) {
/* 5732 */         block.setBlockBoundsBasedOnState((IBlockAccess)this.theWorld, blockpos);
/* 5733 */         double d0 = player.lastTickPosX + (player.posX - player.lastTickPosX) * partialTicks;
/* 5734 */         double d1 = player.lastTickPosY + (player.posY - player.lastTickPosY) * partialTicks;
/* 5735 */         double d2 = player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * partialTicks;
/* 5736 */         AxisAlignedBB axisalignedbb = block.getSelectedBoundingBox((World)this.theWorld, blockpos);
/* 5737 */         Block.EnumOffsetType block$enumoffsettype = block.getOffsetType();
/*      */         
/* 5739 */         if (block$enumoffsettype != Block.EnumOffsetType.NONE) {
/* 5740 */           axisalignedbb = BlockModelUtils.getOffsetBoundingBox(axisalignedbb, block$enumoffsettype, blockpos);
/*      */         }
/*      */         
/* 5743 */         drawSelectionBoundingBox(axisalignedbb.expand(0.0020000000949949026D, 0.0020000000949949026D, 0.0020000000949949026D).offset(-d0, -d1, -d2));
/*      */       } 
/*      */       
/* 5746 */       GlStateManager.depthMask(true);
/* 5747 */       GlStateManager.enableTexture2D();
/*      */       
/* 5749 */       if (Config.isShaders()) {
/* 5750 */         Shaders.enableTexture2D();
/*      */       }
/*      */       
/* 5753 */       GlStateManager.disableBlend();
/*      */     } 
/*      */   }
/*      */   
/*      */   public static void drawSelectionBoundingBox(AxisAlignedBB boundingBox) {
/* 5758 */     Tessellator tessellator = Tessellator.getInstance();
/* 5759 */     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/* 5760 */     worldrenderer.begin(3, DefaultVertexFormats.POSITION);
/* 5761 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.minZ).endVertex();
/* 5762 */     worldrenderer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.minZ).endVertex();
/* 5763 */     worldrenderer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.maxZ).endVertex();
/* 5764 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.maxZ).endVertex();
/* 5765 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.minZ).endVertex();
/* 5766 */     tessellator.draw();
/* 5767 */     worldrenderer.begin(3, DefaultVertexFormats.POSITION);
/* 5768 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.minZ).endVertex();
/* 5769 */     worldrenderer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.minZ).endVertex();
/* 5770 */     worldrenderer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.maxZ).endVertex();
/* 5771 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.maxZ).endVertex();
/* 5772 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.minZ).endVertex();
/* 5773 */     tessellator.draw();
/* 5774 */     worldrenderer.begin(1, DefaultVertexFormats.POSITION);
/* 5775 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.minZ).endVertex();
/* 5776 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.minZ).endVertex();
/* 5777 */     worldrenderer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.minZ).endVertex();
/* 5778 */     worldrenderer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.minZ).endVertex();
/* 5779 */     worldrenderer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.maxZ).endVertex();
/* 5780 */     worldrenderer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.maxZ).endVertex();
/* 5781 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.maxZ).endVertex();
/* 5782 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.maxZ).endVertex();
/* 5783 */     tessellator.draw();
/*      */   }
/*      */   
/*      */   public static void drawOutlinedBoundingBox(AxisAlignedBB boundingBox, int red, int green, int blue, int alpha) {
/* 5787 */     Tessellator tessellator = Tessellator.getInstance();
/* 5788 */     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/* 5789 */     worldrenderer.begin(3, DefaultVertexFormats.POSITION_COLOR);
/* 5790 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5791 */     worldrenderer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5792 */     worldrenderer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
/* 5793 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
/* 5794 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5795 */     tessellator.draw();
/* 5796 */     worldrenderer.begin(3, DefaultVertexFormats.POSITION_COLOR);
/* 5797 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5798 */     worldrenderer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5799 */     worldrenderer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
/* 5800 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
/* 5801 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5802 */     tessellator.draw();
/* 5803 */     worldrenderer.begin(1, DefaultVertexFormats.POSITION_COLOR);
/* 5804 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5805 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5806 */     worldrenderer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5807 */     worldrenderer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.minZ).color(red, green, blue, alpha).endVertex();
/* 5808 */     worldrenderer.pos(boundingBox.maxX, boundingBox.minY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
/* 5809 */     worldrenderer.pos(boundingBox.maxX, boundingBox.maxY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
/* 5810 */     worldrenderer.pos(boundingBox.minX, boundingBox.minY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
/* 5811 */     worldrenderer.pos(boundingBox.minX, boundingBox.maxY, boundingBox.maxZ).color(red, green, blue, alpha).endVertex();
/* 5812 */     tessellator.draw();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void markBlocksForUpdate(int x1, int y1, int z1, int x2, int y2, int z2) {
/* 5819 */     this.viewFrustum.markBlocksForUpdate(x1, y1, z1, x2, y2, z2);
/*      */   }
/*      */   
/*      */   public void markBlockForUpdate(BlockPos pos) {
/* 5823 */     int i = pos.getX();
/* 5824 */     int j = pos.getY();
/* 5825 */     int k = pos.getZ();
/* 5826 */     markBlocksForUpdate(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1);
/*      */   }
/*      */   
/*      */   public void notifyLightSet(BlockPos pos) {
/* 5830 */     int i = pos.getX();
/* 5831 */     int j = pos.getY();
/* 5832 */     int k = pos.getZ();
/* 5833 */     markBlocksForUpdate(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void markBlockRangeForRenderUpdate(int x1, int y1, int z1, int x2, int y2, int z2) {
/* 5841 */     markBlocksForUpdate(x1 - 1, y1 - 1, z1 - 1, x2 + 1, y2 + 1, z2 + 1);
/*      */   }
/*      */   
/*      */   public void playRecord(String recordName, BlockPos blockPosIn) {
/* 5845 */     ISound isound = this.mapSoundPositions.get(blockPosIn);
/*      */     
/* 5847 */     if (isound != null) {
/* 5848 */       this.mc.getSoundHandler().stopSound(isound);
/* 5849 */       this.mapSoundPositions.remove(blockPosIn);
/*      */     } 
/*      */     
/* 5852 */     if (recordName != null) {
/* 5853 */       ItemRecord itemrecord = ItemRecord.getRecord(recordName);
/*      */       
/* 5855 */       if (itemrecord != null) {
/* 5856 */         this.mc.ingameGUI.setRecordPlayingMessage(itemrecord.getRecordNameLocal());
/*      */       }
/*      */       
/* 5859 */       PositionedSoundRecord positionedsoundrecord = PositionedSoundRecord.create(new ResourceLocation(recordName), blockPosIn.getX(), blockPosIn.getY(), blockPosIn.getZ());
/* 5860 */       this.mapSoundPositions.put(blockPosIn, positionedsoundrecord);
/* 5861 */       this.mc.getSoundHandler().playSound((ISound)positionedsoundrecord);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void playSound(String soundName, double x, double y, double z, float volume, float pitch) {}
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void playSoundToNearExcept(EntityPlayer except, String soundName, double x, double y, double z, float volume, float pitch) {}
/*      */ 
/*      */ 
/*      */   
/*      */   public void spawnParticle(int particleID, boolean ignoreRange, final double xCoord, final double yCoord, final double zCoord, double xOffset, double yOffset, double zOffset, int... parameters) {
/*      */     try {
/* 5879 */       spawnEntityFX(particleID, ignoreRange, xCoord, yCoord, zCoord, xOffset, yOffset, zOffset, parameters);
/* 5880 */     } catch (Throwable throwable) {
/* 5881 */       CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception while adding particle");
/* 5882 */       CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being added");
/* 5883 */       crashreportcategory.addCrashSection("ID", Integer.valueOf(particleID));
/*      */       
/* 5885 */       if (parameters != null) {
/* 5886 */         crashreportcategory.addCrashSection("Parameters", parameters);
/*      */       }
/*      */       
/* 5889 */       crashreportcategory.addCrashSectionCallable("Position", new Callable<String>() {
/*      */             public String call() throws Exception {
/* 5891 */               return CrashReportCategory.getCoordinateInfo(xCoord, yCoord, zCoord);
/*      */             }
/*      */           });
/* 5894 */       throw new ReportedException(crashreport);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void spawnParticle(EnumParticleTypes particleIn, double xCoord, double yCoord, double zCoord, double xOffset, double yOffset, double zOffset, int... parameters) {
/* 5899 */     spawnParticle(particleIn.getParticleID(), particleIn.getShouldIgnoreRange(), xCoord, yCoord, zCoord, xOffset, yOffset, zOffset, parameters);
/*      */   }
/*      */   
/*      */   private EntityFX spawnEntityFX(int particleID, boolean ignoreRange, double xCoord, double yCoord, double zCoord, double xOffset, double yOffset, double zOffset, int... parameters) {
/* 5903 */     if (this.mc != null && this.mc.getRenderViewEntity() != null && this.mc.effectRenderer != null) {
/* 5904 */       int i = this.mc.gameSettings.language;
/*      */       
/* 5906 */       if (i == 1 && this.theWorld.rand.nextInt(3) == 0) {
/* 5907 */         i = 2;
/*      */       }
/*      */       
/* 5910 */       double d0 = (this.mc.getRenderViewEntity()).posX - xCoord;
/* 5911 */       double d1 = (this.mc.getRenderViewEntity()).posY - yCoord;
/* 5912 */       double d2 = (this.mc.getRenderViewEntity()).posZ - zCoord;
/*      */       
/* 5914 */       if (particleID == EnumParticleTypes.EXPLOSION_HUGE.getParticleID() && !Config.isAnimatedExplosion())
/* 5915 */         return null; 
/* 5916 */       if (particleID == EnumParticleTypes.EXPLOSION_LARGE.getParticleID() && !Config.isAnimatedExplosion())
/* 5917 */         return null; 
/* 5918 */       if (particleID == EnumParticleTypes.EXPLOSION_NORMAL.getParticleID() && !Config.isAnimatedExplosion())
/* 5919 */         return null; 
/* 5920 */       if (particleID == EnumParticleTypes.SUSPENDED.getParticleID() && !Config.isWaterParticles())
/* 5921 */         return null; 
/* 5922 */       if (particleID == EnumParticleTypes.SUSPENDED_DEPTH.getParticleID() && !Config.isVoidParticles())
/* 5923 */         return null; 
/* 5924 */       if (particleID == EnumParticleTypes.SMOKE_NORMAL.getParticleID() && !Config.isAnimatedSmoke())
/* 5925 */         return null; 
/* 5926 */       if (particleID == EnumParticleTypes.SMOKE_LARGE.getParticleID() && !Config.isAnimatedSmoke())
/* 5927 */         return null; 
/* 5928 */       if (particleID == EnumParticleTypes.SPELL_MOB.getParticleID() && !Config.isPotionParticles())
/* 5929 */         return null; 
/* 5930 */       if (particleID == EnumParticleTypes.SPELL_MOB_AMBIENT.getParticleID() && !Config.isPotionParticles())
/* 5931 */         return null; 
/* 5932 */       if (particleID == EnumParticleTypes.SPELL.getParticleID() && !Config.isPotionParticles())
/* 5933 */         return null; 
/* 5934 */       if (particleID == EnumParticleTypes.SPELL_INSTANT.getParticleID() && !Config.isPotionParticles())
/* 5935 */         return null; 
/* 5936 */       if (particleID == EnumParticleTypes.SPELL_WITCH.getParticleID() && !Config.isPotionParticles())
/* 5937 */         return null; 
/* 5938 */       if (particleID == EnumParticleTypes.PORTAL.getParticleID() && !Config.isPortalParticles())
/* 5939 */         return null; 
/* 5940 */       if (particleID == EnumParticleTypes.FLAME.getParticleID() && !Config.isAnimatedFlame())
/* 5941 */         return null; 
/* 5942 */       if (particleID == EnumParticleTypes.REDSTONE.getParticleID() && !Config.isAnimatedRedstone())
/* 5943 */         return null; 
/* 5944 */       if (particleID == EnumParticleTypes.DRIP_WATER.getParticleID() && !Config.isDrippingWaterLava())
/* 5945 */         return null; 
/* 5946 */       if (particleID == EnumParticleTypes.DRIP_LAVA.getParticleID() && !Config.isDrippingWaterLava())
/* 5947 */         return null; 
/* 5948 */       if (particleID == EnumParticleTypes.FIREWORKS_SPARK.getParticleID() && !Config.isFireworkParticles()) {
/* 5949 */         return null;
/*      */       }
/* 5951 */       if (!ignoreRange) {
/* 5952 */         double d3 = 256.0D;
/*      */         
/* 5954 */         if (particleID == EnumParticleTypes.CRIT.getParticleID()) {
/* 5955 */           d3 = 38416.0D;
/*      */         }
/*      */         
/* 5958 */         if (d0 * d0 + d1 * d1 + d2 * d2 > d3) {
/* 5959 */           return null;
/*      */         }
/*      */         
/* 5962 */         if (i > 1) {
/* 5963 */           return null;
/*      */         }
/*      */       } 
/*      */       
/* 5967 */       EntityFX entityfx = this.mc.effectRenderer.spawnEffectParticle(particleID, xCoord, yCoord, zCoord, xOffset, yOffset, zOffset, parameters);
/*      */       
/* 5969 */       if (particleID == EnumParticleTypes.WATER_BUBBLE.getParticleID()) {
/* 5970 */         CustomColors.updateWaterFX(entityfx, (IBlockAccess)this.theWorld, xCoord, yCoord, zCoord, this.renderEnv);
/*      */       }
/*      */       
/* 5973 */       if (particleID == EnumParticleTypes.WATER_SPLASH.getParticleID()) {
/* 5974 */         CustomColors.updateWaterFX(entityfx, (IBlockAccess)this.theWorld, xCoord, yCoord, zCoord, this.renderEnv);
/*      */       }
/*      */       
/* 5977 */       if (particleID == EnumParticleTypes.WATER_DROP.getParticleID()) {
/* 5978 */         CustomColors.updateWaterFX(entityfx, (IBlockAccess)this.theWorld, xCoord, yCoord, zCoord, this.renderEnv);
/*      */       }
/*      */       
/* 5981 */       if (particleID == EnumParticleTypes.TOWN_AURA.getParticleID()) {
/* 5982 */         CustomColors.updateMyceliumFX(entityfx);
/*      */       }
/*      */       
/* 5985 */       if (particleID == EnumParticleTypes.PORTAL.getParticleID()) {
/* 5986 */         CustomColors.updatePortalFX(entityfx);
/*      */       }
/*      */       
/* 5989 */       if (particleID == EnumParticleTypes.REDSTONE.getParticleID()) {
/* 5990 */         CustomColors.updateReddustFX(entityfx, (IBlockAccess)this.theWorld, xCoord, yCoord, zCoord);
/*      */       }
/*      */       
/* 5993 */       return entityfx;
/*      */     } 
/*      */     
/* 5996 */     return null;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void onEntityAdded(Entity entityIn) {
/* 6005 */     RandomEntities.entityLoaded(entityIn, (World)this.theWorld);
/*      */     
/* 6007 */     if (Config.isDynamicLights()) {
/* 6008 */       DynamicLights.entityAdded(entityIn, this);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void onEntityRemoved(Entity entityIn) {
/* 6017 */     RandomEntities.entityUnloaded(entityIn, (World)this.theWorld);
/*      */     
/* 6019 */     if (Config.isDynamicLights()) {
/* 6020 */       DynamicLights.entityRemoved(entityIn, this);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public void deleteAllDisplayLists() {}
/*      */ 
/*      */ 
/*      */   
/*      */   public void broadcastSound(int soundID, BlockPos pos, int data) {
/* 6031 */     switch (soundID) {
/*      */       case 1013:
/*      */       case 1018:
/* 6034 */         if (this.mc.getRenderViewEntity() != null) {
/* 6035 */           double d0 = pos.getX() - (this.mc.getRenderViewEntity()).posX;
/* 6036 */           double d1 = pos.getY() - (this.mc.getRenderViewEntity()).posY;
/* 6037 */           double d2 = pos.getZ() - (this.mc.getRenderViewEntity()).posZ;
/* 6038 */           double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
/* 6039 */           double d4 = (this.mc.getRenderViewEntity()).posX;
/* 6040 */           double d5 = (this.mc.getRenderViewEntity()).posY;
/* 6041 */           double d6 = (this.mc.getRenderViewEntity()).posZ;
/*      */           
/* 6043 */           if (d3 > 0.0D) {
/* 6044 */             d4 += d0 / d3 * 2.0D;
/* 6045 */             d5 += d1 / d3 * 2.0D;
/* 6046 */             d6 += d2 / d3 * 2.0D;
/*      */           } 
/*      */           
/* 6049 */           if (soundID == 1013) {
/* 6050 */             this.theWorld.playSound(d4, d5, d6, "mob.wither.spawn", 1.0F, 1.0F, false); break;
/*      */           } 
/* 6052 */           this.theWorld.playSound(d4, d5, d6, "mob.enderdragon.end", 5.0F, 1.0F, false);
/*      */         }  break;
/*      */     }  } public void playAuxSFX(EntityPlayer player, int sfxType, BlockPos blockPosIn, int data) { int i, j; double d0, d1, d2; int i1; Block block; double d3, d4, d5; int k, j1; float f, f1, f2;
/*      */     EnumParticleTypes enumparticletypes;
/*      */     int k1;
/*      */     double d6, d8, d10;
/*      */     int l1;
/*      */     double d22;
/*      */     int l;
/* 6061 */     Random random = this.theWorld.rand;
/*      */     
/* 6063 */     switch (sfxType) {
/*      */       case 1000:
/* 6065 */         this.theWorld.playSoundAtPos(blockPosIn, "random.click", 1.0F, 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1001:
/* 6069 */         this.theWorld.playSoundAtPos(blockPosIn, "random.click", 1.0F, 1.2F, false);
/*      */         break;
/*      */       
/*      */       case 1002:
/* 6073 */         this.theWorld.playSoundAtPos(blockPosIn, "random.bow", 1.0F, 1.2F, false);
/*      */         break;
/*      */       
/*      */       case 1003:
/* 6077 */         this.theWorld.playSoundAtPos(blockPosIn, "random.door_open", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
/*      */         break;
/*      */       
/*      */       case 1004:
/* 6081 */         this.theWorld.playSoundAtPos(blockPosIn, "random.fizz", 0.5F, 2.6F + (random.nextFloat() - random.nextFloat()) * 0.8F, false);
/*      */         break;
/*      */       
/*      */       case 1005:
/* 6085 */         if (Item.getItemById(data) instanceof ItemRecord) {
/* 6086 */           this.theWorld.playRecord(blockPosIn, "records." + ((ItemRecord)Item.getItemById(data)).recordName); break;
/*      */         } 
/* 6088 */         this.theWorld.playRecord(blockPosIn, null);
/*      */         break;
/*      */ 
/*      */ 
/*      */       
/*      */       case 1006:
/* 6094 */         this.theWorld.playSoundAtPos(blockPosIn, "random.door_close", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
/*      */         break;
/*      */       
/*      */       case 1007:
/* 6098 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.ghast.charge", 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1008:
/* 6102 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.ghast.fireball", 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1009:
/* 6106 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.ghast.fireball", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1010:
/* 6110 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.zombie.wood", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1011:
/* 6114 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.zombie.metal", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1012:
/* 6118 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.zombie.woodbreak", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1014:
/* 6122 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.wither.shoot", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1015:
/* 6126 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.bat.takeoff", 0.05F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1016:
/* 6130 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.zombie.infect", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1017:
/* 6134 */         this.theWorld.playSoundAtPos(blockPosIn, "mob.zombie.unfect", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
/*      */         break;
/*      */       
/*      */       case 1020:
/* 6138 */         this.theWorld.playSoundAtPos(blockPosIn, "random.anvil_break", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
/*      */         break;
/*      */       
/*      */       case 1021:
/* 6142 */         this.theWorld.playSoundAtPos(blockPosIn, "random.anvil_use", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
/*      */         break;
/*      */       
/*      */       case 1022:
/* 6146 */         this.theWorld.playSoundAtPos(blockPosIn, "random.anvil_land", 0.3F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
/*      */         break;
/*      */       
/*      */       case 2000:
/* 6150 */         i = data % 3 - 1;
/* 6151 */         j = data / 3 % 3 - 1;
/* 6152 */         d0 = blockPosIn.getX() + i * 0.6D + 0.5D;
/* 6153 */         d1 = blockPosIn.getY() + 0.5D;
/* 6154 */         d2 = blockPosIn.getZ() + j * 0.6D + 0.5D;
/*      */         
/* 6156 */         for (i1 = 0; i1 < 10; i1++) {
/* 6157 */           double d15 = random.nextDouble() * 0.2D + 0.01D;
/* 6158 */           double d16 = d0 + i * 0.01D + (random.nextDouble() - 0.5D) * j * 0.5D;
/* 6159 */           double d17 = d1 + (random.nextDouble() - 0.5D) * 0.5D;
/* 6160 */           double d18 = d2 + j * 0.01D + (random.nextDouble() - 0.5D) * i * 0.5D;
/* 6161 */           double d19 = i * d15 + random.nextGaussian() * 0.01D;
/* 6162 */           double d20 = -0.03D + random.nextGaussian() * 0.01D;
/* 6163 */           double d21 = j * d15 + random.nextGaussian() * 0.01D;
/* 6164 */           spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d16, d17, d18, d19, d20, d21, new int[0]);
/*      */         } 
/*      */         return;
/*      */ 
/*      */       
/*      */       case 2001:
/* 6170 */         block = Block.getBlockById(data & 0xFFF);
/*      */         
/* 6172 */         if (block.getMaterial() != Material.air) {
/* 6173 */           this.mc.getSoundHandler().playSound((ISound)new PositionedSoundRecord(new ResourceLocation(block.stepSound.getBreakSound()), (block.stepSound.getVolume() + 1.0F) / 2.0F, block.stepSound.getFrequency() * 0.8F, blockPosIn.getX() + 0.5F, blockPosIn.getY() + 0.5F, blockPosIn.getZ() + 0.5F));
/*      */         }
/*      */         
/* 6176 */         this.mc.effectRenderer.addBlockDestroyEffects(blockPosIn, block.getStateFromMeta(data >> 12 & 0xFF));
/*      */         break;
/*      */       
/*      */       case 2002:
/* 6180 */         d3 = blockPosIn.getX();
/* 6181 */         d4 = blockPosIn.getY();
/* 6182 */         d5 = blockPosIn.getZ();
/*      */         
/* 6184 */         for (k = 0; k < 8; k++) {
/* 6185 */           spawnParticle(EnumParticleTypes.ITEM_CRACK, d3, d4, d5, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, new int[] { Item.getIdFromItem((Item)Items.potionitem), data });
/*      */         } 
/*      */         
/* 6188 */         j1 = Items.potionitem.getColorFromDamage(data);
/* 6189 */         f = (j1 >> 16 & 0xFF) / 255.0F;
/* 6190 */         f1 = (j1 >> 8 & 0xFF) / 255.0F;
/* 6191 */         f2 = (j1 >> 0 & 0xFF) / 255.0F;
/* 6192 */         enumparticletypes = EnumParticleTypes.SPELL;
/*      */         
/* 6194 */         if (Items.potionitem.isEffectInstant(data)) {
/* 6195 */           enumparticletypes = EnumParticleTypes.SPELL_INSTANT;
/*      */         }
/*      */         
/* 6198 */         for (k1 = 0; k1 < 100; k1++) {
/* 6199 */           double d7 = random.nextDouble() * 4.0D;
/* 6200 */           double d9 = random.nextDouble() * Math.PI * 2.0D;
/* 6201 */           double d11 = Math.cos(d9) * d7;
/* 6202 */           double d23 = 0.01D + random.nextDouble() * 0.5D;
/* 6203 */           double d24 = Math.sin(d9) * d7;
/* 6204 */           EntityFX entityfx = spawnEntityFX(enumparticletypes.getParticleID(), enumparticletypes.getShouldIgnoreRange(), d3 + d11 * 0.1D, d4 + 0.3D, d5 + d24 * 0.1D, d11, d23, d24, new int[0]);
/*      */           
/* 6206 */           if (entityfx != null) {
/* 6207 */             float f3 = 0.75F + random.nextFloat() * 0.25F;
/* 6208 */             entityfx.setRBGColorF(f * f3, f1 * f3, f2 * f3);
/* 6209 */             entityfx.multiplyVelocity((float)d7);
/*      */           } 
/*      */         } 
/*      */         
/* 6213 */         this.theWorld.playSoundAtPos(blockPosIn, "game.potion.smash", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
/*      */         break;
/*      */       
/*      */       case 2003:
/* 6217 */         d6 = blockPosIn.getX() + 0.5D;
/* 6218 */         d8 = blockPosIn.getY();
/* 6219 */         d10 = blockPosIn.getZ() + 0.5D;
/*      */         
/* 6221 */         for (l1 = 0; l1 < 8; l1++) {
/* 6222 */           spawnParticle(EnumParticleTypes.ITEM_CRACK, d6, d8, d10, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, new int[] { Item.getIdFromItem(Items.ender_eye) });
/*      */         } 
/*      */         
/* 6225 */         for (d22 = 0.0D; d22 < 6.283185307179586D; d22 += 0.15707963267948966D) {
/* 6226 */           spawnParticle(EnumParticleTypes.PORTAL, d6 + Math.cos(d22) * 5.0D, d8 - 0.4D, d10 + Math.sin(d22) * 5.0D, Math.cos(d22) * -5.0D, 0.0D, Math.sin(d22) * -5.0D, new int[0]);
/* 6227 */           spawnParticle(EnumParticleTypes.PORTAL, d6 + Math.cos(d22) * 5.0D, d8 - 0.4D, d10 + Math.sin(d22) * 5.0D, Math.cos(d22) * -7.0D, 0.0D, Math.sin(d22) * -7.0D, new int[0]);
/*      */         } 
/*      */         return;
/*      */ 
/*      */       
/*      */       case 2004:
/* 6233 */         for (l = 0; l < 20; l++) {
/* 6234 */           double d12 = blockPosIn.getX() + 0.5D + (this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
/* 6235 */           double d13 = blockPosIn.getY() + 0.5D + (this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
/* 6236 */           double d14 = blockPosIn.getZ() + 0.5D + (this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
/* 6237 */           this.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d12, d13, d14, 0.0D, 0.0D, 0.0D, new int[0]);
/* 6238 */           this.theWorld.spawnParticle(EnumParticleTypes.FLAME, d12, d13, d14, 0.0D, 0.0D, 0.0D, new int[0]);
/*      */         } 
/*      */         return;
/*      */ 
/*      */       
/*      */       case 2005:
/* 6244 */         ItemDye.spawnBonemealParticles((World)this.theWorld, blockPosIn, data);
/*      */         break;
/*      */     }  }
/*      */   
/*      */   public void sendBlockBreakProgress(int breakerId, BlockPos pos, int progress) {
/* 6249 */     if (progress >= 0 && progress < 10) {
/* 6250 */       DestroyBlockProgress destroyblockprogress = this.damagedBlocks.get(Integer.valueOf(breakerId));
/*      */       
/* 6252 */       if (destroyblockprogress == null || destroyblockprogress.getPosition().getX() != pos.getX() || destroyblockprogress.getPosition().getY() != pos.getY() || destroyblockprogress.getPosition().getZ() != pos.getZ()) {
/* 6253 */         destroyblockprogress = new DestroyBlockProgress(breakerId, pos);
/* 6254 */         this.damagedBlocks.put(Integer.valueOf(breakerId), destroyblockprogress);
/*      */       } 
/*      */       
/* 6257 */       destroyblockprogress.setPartialBlockDamage(progress);
/* 6258 */       destroyblockprogress.setCloudUpdateTick(this.cloudTickCounter);
/*      */     } else {
/* 6260 */       this.damagedBlocks.remove(Integer.valueOf(breakerId));
/*      */     } 
/*      */   }
/*      */   
/*      */   public void setDisplayListEntitiesDirty() {
/* 6265 */     this.displayListEntitiesDirty = true;
/*      */   }
/*      */   
/*      */   public boolean hasNoChunkUpdates() {
/* 6269 */     return (this.chunksToUpdate.isEmpty() && this.renderDispatcher.hasChunkUpdates());
/*      */   }
/*      */   
/*      */   public void resetClouds() {
/* 6273 */     this.cloudRenderer.reset();
/*      */   }
/*      */   
/*      */   public int getCountRenderers() {
/* 6277 */     return this.viewFrustum.renderChunks.length;
/*      */   }
/*      */   
/*      */   public int getCountActiveRenderers() {
/* 6281 */     return this.renderInfos.size();
/*      */   }
/*      */   
/*      */   public int getCountEntitiesRendered() {
/* 6285 */     return this.countEntitiesRendered;
/*      */   }
/*      */   
/*      */   public int getCountTileEntitiesRendered() {
/* 6289 */     return this.countTileEntitiesRendered;
/*      */   }
/*      */   
/*      */   public int getCountLoadedChunks() {
/* 6293 */     if (this.theWorld == null) {
/* 6294 */       return 0;
/*      */     }
/* 6296 */     IChunkProvider ichunkprovider = this.theWorld.getChunkProvider();
/*      */     
/* 6298 */     if (ichunkprovider == null) {
/* 6299 */       return 0;
/*      */     }
/* 6301 */     if (ichunkprovider != this.worldChunkProvider) {
/* 6302 */       this.worldChunkProvider = ichunkprovider;
/* 6303 */       this.worldChunkProviderMap = (LongHashMap)Reflector.getFieldValue(ichunkprovider, Reflector.ChunkProviderClient_chunkMapping);
/*      */     } 
/*      */     
/* 6306 */     return (this.worldChunkProviderMap == null) ? 0 : this.worldChunkProviderMap.getNumHashElements();
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public int getCountChunksToUpdate() {
/* 6312 */     return this.chunksToUpdate.size();
/*      */   }
/*      */   
/*      */   public RenderChunk getRenderChunk(BlockPos p_getRenderChunk_1_) {
/* 6316 */     return this.viewFrustum.getRenderChunk(p_getRenderChunk_1_);
/*      */   }
/*      */   
/*      */   public WorldClient getWorld() {
/* 6320 */     return this.theWorld;
/*      */   }
/*      */   
/*      */   private void clearRenderInfos() {
/* 6324 */     if (renderEntitiesCounter > 0) {
/* 6325 */       this.renderInfos = new ArrayList<>(this.renderInfos.size() + 16);
/* 6326 */       this.renderInfosEntities = new ArrayList(this.renderInfosEntities.size() + 16);
/* 6327 */       this.renderInfosTileEntities = new ArrayList(this.renderInfosTileEntities.size() + 16);
/*      */     } else {
/* 6329 */       this.renderInfos.clear();
/* 6330 */       this.renderInfosEntities.clear();
/* 6331 */       this.renderInfosTileEntities.clear();
/*      */     } 
/*      */   }
/*      */   
/*      */   public void onPlayerPositionSet() {
/* 6336 */     if (this.firstWorldLoad) {
/* 6337 */       loadRenderers();
/* 6338 */       this.firstWorldLoad = false;
/*      */     } 
/*      */   }
/*      */   
/*      */   public void pauseChunkUpdates() {
/* 6343 */     if (this.renderDispatcher != null) {
/* 6344 */       this.renderDispatcher.pauseChunkUpdates();
/*      */     }
/*      */   }
/*      */   
/*      */   public void resumeChunkUpdates() {
/* 6349 */     if (this.renderDispatcher != null) {
/* 6350 */       this.renderDispatcher.resumeChunkUpdates();
/*      */     }
/*      */   }
/*      */   
/*      */   public void updateTileEntities(Collection<TileEntity> tileEntitiesToRemove, Collection<TileEntity> tileEntitiesToAdd) {
/* 6355 */     synchronized (this.setTileEntities) {
/* 6356 */       this.setTileEntities.removeAll(tileEntitiesToRemove);
/* 6357 */       this.setTileEntities.addAll(tileEntitiesToAdd);
/*      */     } 
/*      */   }
/*      */   
/*      */   public static class ContainerLocalRenderInformation {
/*      */     final RenderChunk renderChunk;
/*      */     EnumFacing facing;
/*      */     int setFacing;
/*      */     
/*      */     public ContainerLocalRenderInformation(RenderChunk p_i2_1_, EnumFacing p_i2_2_, int p_i2_3_) {
/* 6367 */       this.renderChunk = p_i2_1_;
/* 6368 */       this.facing = p_i2_2_;
/* 6369 */       this.setFacing = p_i2_3_;
/*      */     }
/*      */     
/*      */     public void setFacingBit(byte p_setFacingBit_1_, EnumFacing p_setFacingBit_2_) {
/* 6373 */       this.setFacing = this.setFacing | p_setFacingBit_1_ | 1 << p_setFacingBit_2_.ordinal();
/*      */     }
/*      */     
/*      */     public boolean isFacingBit(EnumFacing p_isFacingBit_1_) {
/* 6377 */       return ((this.setFacing & 1 << p_isFacingBit_1_.ordinal()) > 0);
/*      */     }
/*      */     
/*      */     private void initialize(EnumFacing p_initialize_1_, int p_initialize_2_) {
/* 6381 */       this.facing = p_initialize_1_;
/* 6382 */       this.setFacing = p_initialize_2_;
/*      */     }
/*      */   }
/*      */ }


/* Location:              C:\User\\user\Desktop\Butteracking Client v4.1.jar!\net\minecraft\client\renderer\RenderGlobal.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */